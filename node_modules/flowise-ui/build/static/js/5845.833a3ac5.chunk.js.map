{"version":3,"file":"static/js/5845.833a3ac5.chunk.js","mappings":"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","sources":["api/apikey.js","api/chatflows.js","utils/usePrompt.js","views/canvas/CanvasNode.js","views/canvas/ButtonEdge.js","menu-items/settings.js","views/settings/index.js","ui-component/dialog/SaveChatflowDialog.js","views/chatflows/ShareChatbot.js","ui-component/checkbox/Checkbox.js","views/chatflows/EmbedChat.js","assets/images/python.svg","assets/images/javascript.svg","assets/images/cURL.svg","assets/images/embed.svg","api/config.js","ui-component/table/Table.js","views/chatflows/APICodeDialog.js","views/canvas/CanvasHeader.js","ui-component/button/StyledFab.js","views/canvas/AddNodes.js","ui-component/markdown/CodeBlock.js","ui-component/markdown/MemoizedReactMarkdown.js","ui-component/dialog/SourceDocDialog.js","api/chatmessage.js","api/prediction.js","views/chatmessage/ChatMessage.js","views/chatmessage/ChatExpandDialog.js","views/chatmessage/ChatPopUp.js","api/nodes.js","views/canvas/index.js"],"sourcesContent":["import client from './client'\n\nconst getAllAPIKeys = () => client.get('/apikey')\n\nconst createNewAPI = (body) => client.post(`/apikey`, body)\n\nconst updateAPI = (id, body) => client.put(`/apikey/${id}`, body)\n\nconst deleteAPI = (id) => client.delete(`/apikey/${id}`)\n\nexport default {\n    getAllAPIKeys,\n    createNewAPI,\n    updateAPI,\n    deleteAPI\n}\n","import client from './client'\n\nconst getAllChatflows = () => client.get('/chatflows')\n\nconst getSpecificChatflow = (id) => client.get(`/chatflows/${id}`)\n\nconst getSpecificChatflowFromPublicEndpoint = (id) => client.get(`/public-chatflows/${id}`)\n\nconst createNewChatflow = (body) => client.post(`/chatflows`, body)\n\nconst updateChatflow = (id, body) => client.put(`/chatflows/${id}`, body)\n\nconst deleteChatflow = (id) => client.delete(`/chatflows/${id}`)\n\nconst getIsChatflowStreaming = (id) => client.get(`/chatflows-streaming/${id}`)\n\nexport default {\n    getAllChatflows,\n    getSpecificChatflow,\n    getSpecificChatflowFromPublicEndpoint,\n    createNewChatflow,\n    updateChatflow,\n    deleteChatflow,\n    getIsChatflowStreaming\n}\n","import { useCallback, useContext, useEffect } from 'react'\nimport { UNSAFE_NavigationContext as NavigationContext } from 'react-router-dom'\n\n// https://stackoverflow.com/questions/71572678/react-router-v-6-useprompt-typescript\n\nexport function useBlocker(blocker, when = true) {\n    const { navigator } = useContext(NavigationContext)\n\n    useEffect(() => {\n        if (!when) return\n\n        const unblock = navigator.block((tx) => {\n            const autoUnblockingTx = {\n                ...tx,\n                retry() {\n                    unblock()\n                    tx.retry()\n                }\n            }\n\n            blocker(autoUnblockingTx)\n        })\n\n        return unblock\n    }, [navigator, blocker, when])\n}\n\nexport function usePrompt(message, when = true) {\n    const blocker = useCallback(\n        (tx) => {\n            if (window.confirm(message)) tx.retry()\n        },\n        [message]\n    )\n\n    useBlocker(blocker, when)\n}\n","import PropTypes from 'prop-types'\nimport { useContext, useState } from 'react'\n\n// material-ui\nimport { styled, useTheme } from '@mui/material/styles'\nimport { IconButton, Box, Typography, Divider, Button } from '@mui/material'\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard'\nimport NodeInputHandler from './NodeInputHandler'\nimport NodeOutputHandler from './NodeOutputHandler'\nimport AdditionalParamsDialog from 'ui-component/dialog/AdditionalParamsDialog'\n\n// const\nimport { baseURL } from 'store/constant'\nimport { IconTrash, IconCopy } from '@tabler/icons'\nimport { flowContext } from 'store/context/ReactFlowContext'\n\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\n    background: theme.palette.card.main,\n    color: theme.darkTextPrimary,\n    border: 'solid 1px',\n    borderColor: theme.palette.primary[200] + 75,\n    width: '300px',\n    height: 'auto',\n    padding: '10px',\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\n    '&:hover': {\n        borderColor: theme.palette.primary.main\n    }\n}))\n\n// ===========================|| CANVAS NODE ||=========================== //\n\nconst CanvasNode = ({ data }) => {\n    const theme = useTheme()\n    const { deleteNode, duplicateNode } = useContext(flowContext)\n\n    const [showDialog, setShowDialog] = useState(false)\n    const [dialogProps, setDialogProps] = useState({})\n\n    const onDialogClicked = () => {\n        const dialogProps = {\n            data,\n            inputParams: data.inputParams.filter((param) => param.additionalParams),\n            confirmButtonName: 'Save',\n            cancelButtonName: 'Cancel'\n        }\n        setDialogProps(dialogProps)\n        setShowDialog(true)\n    }\n\n    return (\n        <>\n            <CardWrapper\n                content={false}\n                sx={{\n                    padding: 0,\n                    borderColor: data.selected ? theme.palette.primary.main : theme.palette.text.secondary\n                }}\n                border={false}\n            >\n                <Box>\n                    <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                        <Box style={{ width: 50, marginRight: 10, padding: 5 }}>\n                            <div\n                                style={{\n                                    ...theme.typography.commonAvatar,\n                                    ...theme.typography.largeAvatar,\n                                    borderRadius: '50%',\n                                    backgroundColor: 'white',\n                                    cursor: 'grab'\n                                }}\n                            >\n                                <img\n                                    style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }}\n                                    src={`${baseURL}/api/v1/node-icon/${data.name}`}\n                                    alt='Notification'\n                                />\n                            </div>\n                        </Box>\n                        <Box>\n                            <Typography\n                                sx={{\n                                    fontSize: '1rem',\n                                    fontWeight: 500\n                                }}\n                            >\n                                {data.label}\n                            </Typography>\n                        </Box>\n                        <div style={{ flexGrow: 1 }}></div>\n                        <IconButton\n                            title='Duplicate'\n                            onClick={() => {\n                                duplicateNode(data.id)\n                            }}\n                            sx={{ height: 35, width: 35, '&:hover': { color: theme?.palette.primary.main } }}\n                            color={theme?.customization?.isDarkMode ? theme.colors?.paper : 'inherit'}\n                        >\n                            <IconCopy />\n                        </IconButton>\n                        <IconButton\n                            title='Delete'\n                            onClick={() => {\n                                deleteNode(data.id)\n                            }}\n                            sx={{ height: 35, width: 35, mr: 1, '&:hover': { color: 'red' } }}\n                            color={theme?.customization?.isDarkMode ? theme.colors?.paper : 'inherit'}\n                        >\n                            <IconTrash />\n                        </IconButton>\n                    </div>\n                    {(data.inputAnchors.length > 0 || data.inputParams.length > 0) && (\n                        <>\n                            <Divider />\n                            <Box sx={{ background: theme.palette.asyncSelect.main, p: 1 }}>\n                                <Typography\n                                    sx={{\n                                        fontWeight: 500,\n                                        textAlign: 'center'\n                                    }}\n                                >\n                                    Inputs\n                                </Typography>\n                            </Box>\n                            <Divider />\n                        </>\n                    )}\n                    {data.inputAnchors.map((inputAnchor, index) => (\n                        <NodeInputHandler key={index} inputAnchor={inputAnchor} data={data} />\n                    ))}\n                    {data.inputParams.map((inputParam, index) => (\n                        <NodeInputHandler key={index} inputParam={inputParam} data={data} />\n                    ))}\n                    {data.inputParams.find((param) => param.additionalParams) && (\n                        <div\n                            style={{\n                                textAlign: 'center',\n                                marginTop:\n                                    data.inputParams.filter((param) => param.additionalParams).length ===\n                                    data.inputParams.length + data.inputAnchors.length\n                                        ? 20\n                                        : 0\n                            }}\n                        >\n                            <Button sx={{ borderRadius: 25, width: '90%', mb: 2 }} variant='outlined' onClick={onDialogClicked}>\n                                Additional Parameters\n                            </Button>\n                        </div>\n                    )}\n                    <Divider />\n                    <Box sx={{ background: theme.palette.asyncSelect.main, p: 1 }}>\n                        <Typography\n                            sx={{\n                                fontWeight: 500,\n                                textAlign: 'center'\n                            }}\n                        >\n                            Output\n                        </Typography>\n                    </Box>\n                    <Divider />\n\n                    {data.outputAnchors.map((outputAnchor, index) => (\n                        <NodeOutputHandler key={index} outputAnchor={outputAnchor} data={data} />\n                    ))}\n                </Box>\n            </CardWrapper>\n            <AdditionalParamsDialog\n                show={showDialog}\n                dialogProps={dialogProps}\n                onCancel={() => setShowDialog(false)}\n            ></AdditionalParamsDialog>\n        </>\n    )\n}\n\nCanvasNode.propTypes = {\n    data: PropTypes.object\n}\n\nexport default CanvasNode\n","import { getBezierPath, EdgeText } from 'reactflow'\nimport PropTypes from 'prop-types'\nimport { useDispatch } from 'react-redux'\nimport { useContext } from 'react'\nimport { SET_DIRTY } from 'store/actions'\nimport { flowContext } from 'store/context/ReactFlowContext'\n\nimport './index.css'\n\nconst foreignObjectSize = 40\n\nconst ButtonEdge = ({ id, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, style = {}, data, markerEnd }) => {\n    const [edgePath, edgeCenterX, edgeCenterY] = getBezierPath({\n        sourceX,\n        sourceY,\n        sourcePosition,\n        targetX,\n        targetY,\n        targetPosition\n    })\n\n    const { deleteEdge } = useContext(flowContext)\n\n    const dispatch = useDispatch()\n\n    const onEdgeClick = (evt, id) => {\n        evt.stopPropagation()\n        deleteEdge(id)\n        dispatch({ type: SET_DIRTY })\n    }\n\n    return (\n        <>\n            <path id={id} style={style} className='react-flow__edge-path' d={edgePath} markerEnd={markerEnd} />\n            {data && data.label && (\n                <EdgeText\n                    x={sourceX + 10}\n                    y={sourceY + 10}\n                    label={data.label}\n                    labelStyle={{ fill: 'black' }}\n                    labelBgStyle={{ fill: 'transparent' }}\n                    labelBgPadding={[2, 4]}\n                    labelBgBorderRadius={2}\n                />\n            )}\n            <foreignObject\n                width={foreignObjectSize}\n                height={foreignObjectSize}\n                x={edgeCenterX - foreignObjectSize / 2}\n                y={edgeCenterY - foreignObjectSize / 2}\n                className='edgebutton-foreignobject'\n                requiredExtensions='http://www.w3.org/1999/xhtml'\n            >\n                <div>\n                    <button className='edgebutton' onClick={(event) => onEdgeClick(event, id)}>\n                        ×\n                    </button>\n                </div>\n            </foreignObject>\n        </>\n    )\n}\n\nButtonEdge.propTypes = {\n    id: PropTypes.string,\n    sourceX: PropTypes.number,\n    sourceY: PropTypes.number,\n    targetX: PropTypes.number,\n    targetY: PropTypes.number,\n    sourcePosition: PropTypes.any,\n    targetPosition: PropTypes.any,\n    style: PropTypes.object,\n    data: PropTypes.object,\n    markerEnd: PropTypes.any\n}\n\nexport default ButtonEdge\n","// assets\nimport { IconTrash, IconFileUpload, IconFileExport, IconCopy } from '@tabler/icons'\n\n// constant\nconst icons = { IconTrash, IconFileUpload, IconFileExport, IconCopy }\n\n// ==============================|| SETTINGS MENU ITEMS ||============================== //\n\nconst settings = {\n    id: 'settings',\n    title: '',\n    type: 'group',\n    children: [\n        {\n            id: 'duplicateChatflow',\n            title: 'Duplicate Chatflow',\n            type: 'item',\n            url: '',\n            icon: icons.IconCopy\n        },\n        {\n            id: 'loadChatflow',\n            title: 'Load Chatflow',\n            type: 'item',\n            url: '',\n            icon: icons.IconFileUpload\n        },\n        {\n            id: 'exportChatflow',\n            title: 'Export Chatflow',\n            type: 'item',\n            url: '',\n            icon: icons.IconFileExport\n        },\n        {\n            id: 'deleteChatflow',\n            title: 'Delete Chatflow',\n            type: 'item',\n            url: '',\n            icon: icons.IconTrash\n        }\n    ]\n}\n\nexport default settings\n","import { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\n// material-ui\nimport { useTheme } from '@mui/material/styles'\nimport { Box, List, Paper, Popper, ClickAwayListener } from '@mui/material'\n\n// third-party\nimport PerfectScrollbar from 'react-perfect-scrollbar'\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard'\nimport Transitions from 'ui-component/extended/Transitions'\nimport NavItem from 'layout/MainLayout/Sidebar/MenuList/NavItem'\n\nimport settings from 'menu-items/settings'\n\n// ==============================|| SETTINGS ||============================== //\n\nconst Settings = ({ chatflow, isSettingsOpen, anchorEl, onSettingsItemClick, onUploadFile, onClose }) => {\n    const theme = useTheme()\n    const [settingsMenu, setSettingsMenu] = useState([])\n\n    const [open, setOpen] = useState(false)\n\n    useEffect(() => {\n        if (chatflow && !chatflow.id) {\n            const settingsMenu = settings.children.filter((menu) => menu.id === 'loadChatflow')\n            setSettingsMenu(settingsMenu)\n        } else if (chatflow && chatflow.id) {\n            const settingsMenu = settings.children\n            setSettingsMenu(settingsMenu)\n        }\n    }, [chatflow])\n\n    useEffect(() => {\n        setOpen(isSettingsOpen)\n    }, [isSettingsOpen])\n\n    // settings list items\n    const items = settingsMenu.map((menu) => {\n        return (\n            <NavItem\n                key={menu.id}\n                item={menu}\n                level={1}\n                navType='SETTINGS'\n                onClick={(id) => onSettingsItemClick(id)}\n                onUploadFile={onUploadFile}\n            />\n        )\n    })\n\n    return (\n        <>\n            <Popper\n                placement='bottom-end'\n                open={open}\n                anchorEl={anchorEl}\n                role={undefined}\n                transition\n                disablePortal\n                popperOptions={{\n                    modifiers: [\n                        {\n                            name: 'offset',\n                            options: {\n                                offset: [170, 20]\n                            }\n                        }\n                    ]\n                }}\n                sx={{ zIndex: 1000 }}\n            >\n                {({ TransitionProps }) => (\n                    <Transitions in={open} {...TransitionProps}>\n                        <Paper>\n                            <ClickAwayListener onClickAway={onClose}>\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\n                                    <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}>\n                                        <Box sx={{ p: 2 }}>\n                                            <List>{items}</List>\n                                        </Box>\n                                    </PerfectScrollbar>\n                                </MainCard>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Transitions>\n                )}\n            </Popper>\n        </>\n    )\n}\n\nSettings.propTypes = {\n    chatflow: PropTypes.object,\n    isSettingsOpen: PropTypes.bool,\n    anchorEl: PropTypes.any,\n    onSettingsItemClick: PropTypes.func,\n    onUploadFile: PropTypes.func,\n    onClose: PropTypes.func\n}\n\nexport default Settings\n","import { createPortal } from 'react-dom'\nimport { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Button, Dialog, DialogActions, DialogContent, OutlinedInput, DialogTitle } from '@mui/material'\nimport { StyledButton } from 'ui-component/button/StyledButton'\n\nconst SaveChatflowDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\n    const portalElement = document.getElementById('portal')\n\n    const [chatflowName, setChatflowName] = useState('')\n    const [isReadyToSave, setIsReadyToSave] = useState(false)\n\n    useEffect(() => {\n        if (chatflowName) setIsReadyToSave(true)\n        else setIsReadyToSave(false)\n    }, [chatflowName])\n\n    const component = show ? (\n        <Dialog\n            open={show}\n            fullWidth\n            maxWidth='xs'\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title}\n            </DialogTitle>\n            <DialogContent>\n                <OutlinedInput\n                    sx={{ mt: 1 }}\n                    id='chatflow-name'\n                    type='text'\n                    fullWidth\n                    placeholder='My New Chatflow'\n                    value={chatflowName}\n                    onChange={(e) => setChatflowName(e.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\n                <StyledButton disabled={!isReadyToSave} variant='contained' onClick={() => onConfirm(chatflowName)}>\n                    {dialogProps.confirmButtonName}\n                </StyledButton>\n            </DialogActions>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nSaveChatflowDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func\n}\n\nexport default SaveChatflowDialog\n","import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction, SET_CHATFLOW } from 'store/actions'\nimport { SketchPicker } from 'react-color'\nimport PropTypes from 'prop-types'\n\nimport { Box, Typography, Button, Switch, OutlinedInput, Popover, Stack, IconButton } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\n// Project import\nimport { StyledButton } from 'ui-component/button/StyledButton'\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\n\n// Icons\nimport { IconX, IconCopy, IconArrowUpRightCircle } from '@tabler/icons'\n\n// API\nimport chatflowsApi from 'api/chatflows'\n\n// utils\nimport useNotifier from 'utils/useNotifier'\n\n// Const\nimport { baseURL } from 'store/constant'\n\nconst defaultConfig = {\n    backgroundColor: '#ffffff',\n    fontSize: 16,\n    poweredByTextColor: '#303235',\n    botMessage: {\n        backgroundColor: '#f7f8ff',\n        textColor: '#303235'\n    },\n    userMessage: {\n        backgroundColor: '#3B81F6',\n        textColor: '#ffffff'\n    },\n    textInput: {\n        backgroundColor: '#ffffff',\n        textColor: '#303235',\n        sendButtonColor: '#3B81F6'\n    }\n}\n\nconst ShareChatbot = ({ isSessionMemory }) => {\n    const dispatch = useDispatch()\n    const theme = useTheme()\n    const chatflow = useSelector((state) => state.canvas.chatflow)\n    const chatflowid = chatflow.id\n    const chatbotConfig = chatflow.chatbotConfig ? JSON.parse(chatflow.chatbotConfig) : {}\n\n    useNotifier()\n\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [isPublicChatflow, setChatflowIsPublic] = useState(chatflow.isPublic ?? false)\n    const [generateNewSession, setGenerateNewSession] = useState(chatbotConfig?.generateNewSession ?? false)\n\n    const [welcomeMessage, setWelcomeMessage] = useState(chatbotConfig?.welcomeMessage ?? '')\n    const [backgroundColor, setBackgroundColor] = useState(chatbotConfig?.backgroundColor ?? defaultConfig.backgroundColor)\n    const [fontSize, setFontSize] = useState(chatbotConfig?.fontSize ?? defaultConfig.fontSize)\n    const [poweredByTextColor, setPoweredByTextColor] = useState(chatbotConfig?.poweredByTextColor ?? defaultConfig.poweredByTextColor)\n\n    const [botMessageBackgroundColor, setBotMessageBackgroundColor] = useState(\n        chatbotConfig?.botMessage?.backgroundColor ?? defaultConfig.botMessage.backgroundColor\n    )\n    const [botMessageTextColor, setBotMessageTextColor] = useState(\n        chatbotConfig?.botMessage?.textColor ?? defaultConfig.botMessage.textColor\n    )\n    const [botMessageAvatarSrc, setBotMessageAvatarSrc] = useState(chatbotConfig?.botMessage?.avatarSrc ?? '')\n    const [botMessageShowAvatar, setBotMessageShowAvatar] = useState(chatbotConfig?.botMessage?.showAvatar ?? false)\n\n    const [userMessageBackgroundColor, setUserMessageBackgroundColor] = useState(\n        chatbotConfig?.userMessage?.backgroundColor ?? defaultConfig.userMessage.backgroundColor\n    )\n    const [userMessageTextColor, setUserMessageTextColor] = useState(\n        chatbotConfig?.userMessage?.textColor ?? defaultConfig.userMessage.textColor\n    )\n    const [userMessageAvatarSrc, setUserMessageAvatarSrc] = useState(chatbotConfig?.userMessage?.avatarSrc ?? '')\n    const [userMessageShowAvatar, setUserMessageShowAvatar] = useState(chatbotConfig?.userMessage?.showAvatar ?? false)\n\n    const [textInputBackgroundColor, setTextInputBackgroundColor] = useState(\n        chatbotConfig?.textInput?.backgroundColor ?? defaultConfig.textInput.backgroundColor\n    )\n    const [textInputTextColor, setTextInputTextColor] = useState(chatbotConfig?.textInput?.textColor ?? defaultConfig.textInput.textColor)\n    const [textInputPlaceholder, setTextInputPlaceholder] = useState(chatbotConfig?.textInput?.placeholder ?? '')\n    const [textInputSendButtonColor, setTextInputSendButtonColor] = useState(\n        chatbotConfig?.textInput?.sendButtonColor ?? defaultConfig.textInput.sendButtonColor\n    )\n\n    const [colorAnchorEl, setColorAnchorEl] = useState(null)\n    const [selectedColorConfig, setSelectedColorConfig] = useState('')\n    const [sketchPickerColor, setSketchPickerColor] = useState('')\n    const openColorPopOver = Boolean(colorAnchorEl)\n\n    const [copyAnchorEl, setCopyAnchorEl] = useState(null)\n    const openCopyPopOver = Boolean(copyAnchorEl)\n\n    const formatObj = () => {\n        const obj = {\n            botMessage: {\n                showAvatar: false\n            },\n            userMessage: {\n                showAvatar: false\n            },\n            textInput: {},\n            overrideConfig: {}\n        }\n        if (welcomeMessage) obj.welcomeMessage = welcomeMessage\n        if (backgroundColor) obj.backgroundColor = backgroundColor\n        if (fontSize) obj.fontSize = fontSize\n        if (poweredByTextColor) obj.poweredByTextColor = poweredByTextColor\n\n        if (botMessageBackgroundColor) obj.botMessage.backgroundColor = botMessageBackgroundColor\n        if (botMessageTextColor) obj.botMessage.textColor = botMessageTextColor\n        if (botMessageAvatarSrc) obj.botMessage.avatarSrc = botMessageAvatarSrc\n        if (botMessageShowAvatar) obj.botMessage.showAvatar = botMessageShowAvatar\n\n        if (userMessageBackgroundColor) obj.userMessage.backgroundColor = userMessageBackgroundColor\n        if (userMessageTextColor) obj.userMessage.textColor = userMessageTextColor\n        if (userMessageAvatarSrc) obj.userMessage.avatarSrc = userMessageAvatarSrc\n        if (userMessageShowAvatar) obj.userMessage.showAvatar = userMessageShowAvatar\n\n        if (textInputBackgroundColor) obj.textInput.backgroundColor = textInputBackgroundColor\n        if (textInputTextColor) obj.textInput.textColor = textInputTextColor\n        if (textInputPlaceholder) obj.textInput.placeholder = textInputPlaceholder\n        if (textInputSendButtonColor) obj.textInput.sendButtonColor = textInputSendButtonColor\n\n        if (isSessionMemory) obj.overrideConfig.generateNewSession = generateNewSession\n\n        return obj\n    }\n\n    const onSave = async () => {\n        try {\n            const saveResp = await chatflowsApi.updateChatflow(chatflowid, {\n                chatbotConfig: JSON.stringify(formatObj())\n            })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Chatbot Configuration Saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\n            }\n        } catch (error) {\n            console.error(error)\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Chatbot Configuration: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    const onSwitchChange = async (checked) => {\n        try {\n            const saveResp = await chatflowsApi.updateChatflow(chatflowid, { isPublic: checked })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Chatbot Configuration Saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\n            }\n        } catch (error) {\n            console.error(error)\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Chatbot Configuration: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    const handleClosePopOver = () => {\n        setColorAnchorEl(null)\n    }\n\n    const handleCloseCopyPopOver = () => {\n        setCopyAnchorEl(null)\n    }\n\n    const onColorSelected = (hexColor) => {\n        switch (selectedColorConfig) {\n            case 'backgroundColor':\n                setBackgroundColor(hexColor)\n                break\n            case 'poweredByTextColor':\n                setPoweredByTextColor(hexColor)\n                break\n            case 'botMessageBackgroundColor':\n                setBotMessageBackgroundColor(hexColor)\n                break\n            case 'botMessageTextColor':\n                setBotMessageTextColor(hexColor)\n                break\n            case 'userMessageBackgroundColor':\n                setUserMessageBackgroundColor(hexColor)\n                break\n            case 'userMessageTextColor':\n                setUserMessageTextColor(hexColor)\n                break\n            case 'textInputBackgroundColor':\n                setTextInputBackgroundColor(hexColor)\n                break\n            case 'textInputTextColor':\n                setTextInputTextColor(hexColor)\n                break\n            case 'textInputSendButtonColor':\n                setTextInputSendButtonColor(hexColor)\n                break\n        }\n        setSketchPickerColor(hexColor)\n    }\n\n    const onTextChanged = (value, fieldName) => {\n        switch (fieldName) {\n            case 'welcomeMessage':\n                setWelcomeMessage(value)\n                break\n            case 'fontSize':\n                setFontSize(value)\n                break\n            case 'botMessageAvatarSrc':\n                setBotMessageAvatarSrc(value)\n                break\n            case 'userMessageAvatarSrc':\n                setUserMessageAvatarSrc(value)\n                break\n            case 'textInputPlaceholder':\n                setTextInputPlaceholder(value)\n                break\n        }\n    }\n\n    const onBooleanChanged = (value, fieldName) => {\n        switch (fieldName) {\n            case 'botMessageShowAvatar':\n                setBotMessageShowAvatar(value)\n                break\n            case 'userMessageShowAvatar':\n                setUserMessageShowAvatar(value)\n                break\n            case 'generateNewSession':\n                setGenerateNewSession(value)\n                break\n        }\n    }\n\n    const colorField = (color, fieldName, fieldLabel) => {\n        return (\n            <Box sx={{ pt: 2, pb: 2 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\n                    <Box\n                        sx={{\n                            cursor: 'pointer',\n                            width: '30px',\n                            height: '30px',\n                            border: '1px solid #616161',\n                            marginRight: '10px',\n                            backgroundColor: color ?? '#ffffff',\n                            borderRadius: '5px'\n                        }}\n                        onClick={(event) => {\n                            setSelectedColorConfig(fieldName)\n                            setSketchPickerColor(color ?? '#ffffff')\n                            setColorAnchorEl(event.currentTarget)\n                        }}\n                    ></Box>\n                </div>\n            </Box>\n        )\n    }\n\n    const booleanField = (value, fieldName, fieldLabel) => {\n        return (\n            <Box sx={{ pt: 2, pb: 2 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\n                    <Switch\n                        id={fieldName}\n                        checked={value}\n                        onChange={(event) => {\n                            onBooleanChanged(event.target.checked, fieldName)\n                        }}\n                    />\n                </div>\n            </Box>\n        )\n    }\n\n    const textField = (message, fieldName, fieldLabel, fieldType = 'string', placeholder = '') => {\n        return (\n            <Box sx={{ pt: 2, pb: 2 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\n                    <OutlinedInput\n                        id={fieldName}\n                        type={fieldType}\n                        fullWidth\n                        value={message}\n                        placeholder={placeholder}\n                        name={fieldName}\n                        onChange={(e) => {\n                            onTextChanged(e.target.value, fieldName)\n                        }}\n                    />\n                </div>\n            </Box>\n        )\n    }\n\n    return (\n        <>\n            <Stack direction='row'>\n                <Typography\n                    sx={{\n                        p: 1,\n                        borderRadius: 10,\n                        backgroundColor: theme.palette.primary.light,\n                        width: 'max-content',\n                        height: 'max-content'\n                    }}\n                    variant='h5'\n                >\n                    {`${baseURL}/chatbot/${chatflowid}`}\n                </Typography>\n                <IconButton\n                    title='Copy Link'\n                    color='success'\n                    onClick={(event) => {\n                        navigator.clipboard.writeText(`${baseURL}/chatbot/${chatflowid}`)\n                        setCopyAnchorEl(event.currentTarget)\n                        setTimeout(() => {\n                            handleCloseCopyPopOver()\n                        }, 1500)\n                    }}\n                >\n                    <IconCopy />\n                </IconButton>\n                <IconButton title='Open New Tab' color='primary' onClick={() => window.open(`${baseURL}/chatbot/${chatflowid}`, '_blank')}>\n                    <IconArrowUpRightCircle />\n                </IconButton>\n                <div style={{ flex: 1 }} />\n                <div style={{ display: 'flex', alignItems: 'center' }}>\n                    <Switch\n                        checked={isPublicChatflow}\n                        onChange={(event) => {\n                            setChatflowIsPublic(event.target.checked)\n                            onSwitchChange(event.target.checked)\n                        }}\n                    />\n                    <Typography>Make Public</Typography>\n                    <TooltipWithParser\n                        style={{ marginLeft: 10 }}\n                        title={'Making public will allow anyone to access the chatbot without username & password'}\n                    />\n                </div>\n            </Stack>\n            {textField(welcomeMessage, 'welcomeMessage', 'Welcome Message', 'string', 'Hello! This is custom welcome message')}\n            {colorField(backgroundColor, 'backgroundColor', 'Background Color')}\n            {textField(fontSize, 'fontSize', 'Font Size', 'number')}\n            {colorField(poweredByTextColor, 'poweredByTextColor', 'PoweredBy TextColor')}\n\n            {/*BOT Message*/}\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                Bot Message\n            </Typography>\n            {colorField(botMessageBackgroundColor, 'botMessageBackgroundColor', 'Background Color')}\n            {colorField(botMessageTextColor, 'botMessageTextColor', 'Text Color')}\n            {textField(\n                botMessageAvatarSrc,\n                'botMessageAvatarSrc',\n                'Avatar Link',\n                'string',\n                `https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png`\n            )}\n            {booleanField(botMessageShowAvatar, 'botMessageShowAvatar', 'Show Avatar')}\n\n            {/*USER Message*/}\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                User Message\n            </Typography>\n            {colorField(userMessageBackgroundColor, 'userMessageBackgroundColor', 'Background Color')}\n            {colorField(userMessageTextColor, 'userMessageTextColor', 'Text Color')}\n            {textField(\n                userMessageAvatarSrc,\n                'userMessageAvatarSrc',\n                'Avatar Link',\n                'string',\n                `https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png`\n            )}\n            {booleanField(userMessageShowAvatar, 'userMessageShowAvatar', 'Show Avatar')}\n\n            {/*TEXT Input*/}\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                Text Input\n            </Typography>\n            {colorField(textInputBackgroundColor, 'textInputBackgroundColor', 'Background Color')}\n            {colorField(textInputTextColor, 'textInputTextColor', 'Text Color')}\n            {textField(textInputPlaceholder, 'textInputPlaceholder', 'TextInput Placeholder', 'string', `Type question..`)}\n            {colorField(textInputSendButtonColor, 'textInputSendButtonColor', 'TextIntput Send Button Color')}\n\n            {/*Session Memory Input*/}\n            {isSessionMemory && (\n                <>\n                    <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                        Session Memory\n                    </Typography>\n                    {booleanField(generateNewSession, 'generateNewSession', 'Start new session when chatbot link is opened or refreshed')}\n                </>\n            )}\n\n            <StyledButton style={{ marginBottom: 10, marginTop: 10 }} variant='contained' onClick={() => onSave()}>\n                Save Changes\n            </StyledButton>\n            <Popover\n                open={openColorPopOver}\n                anchorEl={colorAnchorEl}\n                onClose={handleClosePopOver}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left'\n                }}\n            >\n                <SketchPicker color={sketchPickerColor} onChange={(color) => onColorSelected(color.hex)} />\n            </Popover>\n            <Popover\n                open={openCopyPopOver}\n                anchorEl={copyAnchorEl}\n                onClose={handleCloseCopyPopOver}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left'\n                }}\n            >\n                <Typography variant='h6' sx={{ pl: 1, pr: 1, color: 'white', background: theme.palette.success.dark }}>\n                    Copied!\n                </Typography>\n            </Popover>\n        </>\n    )\n}\n\nShareChatbot.propTypes = {\n    isSessionMemory: PropTypes.bool\n}\n\nexport default ShareChatbot\n","import { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { FormControlLabel, Checkbox } from '@mui/material'\n\nexport const CheckboxInput = ({ value, label, onChange, disabled = false }) => {\n    const [myValue, setMyValue] = useState(value)\n\n    return (\n        <>\n            <FormControlLabel\n                sx={{ mt: 1, width: '100%' }}\n                size='small'\n                control={\n                    <Checkbox\n                        disabled={disabled}\n                        checked={myValue}\n                        onChange={(event) => {\n                            setMyValue(event.target.checked)\n                            onChange(event.target.checked)\n                        }}\n                    />\n                }\n                label={label}\n            />\n        </>\n    )\n}\n\nCheckboxInput.propTypes = {\n    value: PropTypes.bool,\n    label: PropTypes.string,\n    onChange: PropTypes.func,\n    disabled: PropTypes.bool\n}\n","import { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Tabs, Tab, Box } from '@mui/material'\nimport { CopyBlock, atomOneDark } from 'react-code-blocks'\n\n// Project import\nimport { CheckboxInput } from 'ui-component/checkbox/Checkbox'\n\n// Const\nimport { baseURL } from 'store/constant'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`attachment-tabpanel-${index}`}\n            aria-labelledby={`attachment-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\n        </div>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `attachment-tab-${index}`,\n        'aria-controls': `attachment-tabpanel-${index}`\n    }\n}\n\nconst embedPopupHtmlCode = (chatflowid) => {\n    return `<script type=\"module\">\n    import Chatbot from \"https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js\"\n    Chatbot.init({\n        chatflowid: \"${chatflowid}\",\n        apiHost: \"${baseURL}\",\n    })\n</script>`\n}\n\nconst embedPopupReactCode = (chatflowid) => {\n    return `import { BubbleChat } from 'flowise-embed-react'\n\nconst App = () => {\n    return (\n        <BubbleChat chatflowid=\"${chatflowid}\" apiHost=\"${baseURL}\" />\n    );\n};`\n}\n\nconst embedFullpageHtmlCode = (chatflowid) => {\n    return `<flowise-fullchatbot></flowise-fullchatbot>\n<script type=\"module\">\n    import Chatbot from \"https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js\"\n    Chatbot.initFull({\n        chatflowid: \"${chatflowid}\",\n        apiHost: \"${baseURL}\",\n    })\n</script>`\n}\n\nconst embedFullpageReactCode = (chatflowid) => {\n    return `import { FullPageChat } from \"flowise-embed-react\"\n\nconst App = () => {\n    return (\n        <FullPageChat\n            chatflowid=\"${chatflowid}\"\n            apiHost=\"${baseURL}\"\n        />\n    );\n};`\n}\n\nconst buttonConfig = (isReact = false) => {\n    return isReact\n        ? `button: {\n                    backgroundColor: \"#3B81F6\",\n                    right: 20,\n                    bottom: 20,\n                    size: \"medium\",\n                    iconColor: \"white\",\n                    customIconSrc: \"https://raw.githubusercontent.com/walkxcode/dashboard-icons/main/svg/google-messages.svg\",\n                }`\n        : `button: {\n                backgroundColor: \"#3B81F6\",\n                right: 20,\n                bottom: 20,\n                size: \"medium\",\n                iconColor: \"white\",\n                customIconSrc: \"https://raw.githubusercontent.com/walkxcode/dashboard-icons/main/svg/google-messages.svg\",\n            }`\n}\n\nconst chatwindowConfig = (isReact = false) => {\n    return isReact\n        ? `chatWindow: {\n                    welcomeMessage: \"Hello! This is custom welcome message\",\n                    backgroundColor: \"#ffffff\",\n                    height: 700,\n                    width: 400,\n                    fontSize: 16,\n                    poweredByTextColor: \"#303235\",\n                    botMessage: {\n                        backgroundColor: \"#f7f8ff\",\n                        textColor: \"#303235\",\n                        showAvatar: true,\n                        avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png\",\n                    },\n                    userMessage: {\n                        backgroundColor: \"#3B81F6\",\n                        textColor: \"#ffffff\",\n                        showAvatar: true,\n                        avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png\",\n                    },\n                    textInput: {\n                        placeholder: \"Type your question\",\n                        backgroundColor: \"#ffffff\",\n                        textColor: \"#303235\",\n                        sendButtonColor: \"#3B81F6\",\n                    }\n                }`\n        : `chatWindow: {\n                welcomeMessage: \"Hello! This is custom welcome message\",\n                backgroundColor: \"#ffffff\",\n                height: 700,\n                width: 400,\n                fontSize: 16,\n                poweredByTextColor: \"#303235\",\n                botMessage: {\n                    backgroundColor: \"#f7f8ff\",\n                    textColor: \"#303235\",\n                    showAvatar: true,\n                    avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png\",\n                },\n                userMessage: {\n                    backgroundColor: \"#3B81F6\",\n                    textColor: \"#ffffff\",\n                    showAvatar: true,\n                    avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png\",\n                },\n                textInput: {\n                    placeholder: \"Type your question\",\n                    backgroundColor: \"#ffffff\",\n                    textColor: \"#303235\",\n                    sendButtonColor: \"#3B81F6\",\n                }\n            }`\n}\n\nconst embedPopupHtmlCodeCustomization = (chatflowid) => {\n    return `<script type=\"module\">\n    import Chatbot from \"https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js\"\n    Chatbot.init({\n        chatflowid: \"${chatflowid}\",\n        apiHost: \"${baseURL}\",\n        chatflowConfig: {\n            // topK: 2\n        },\n        theme: {\n            ${buttonConfig()},\n            ${chatwindowConfig()}\n        }\n    })\n</script>`\n}\n\nconst embedPopupReactCodeCustomization = (chatflowid) => {\n    return `import { BubbleChat } from 'flowise-embed-react'\n\nconst App = () => {\n    return (\n        <BubbleChat\n            chatflowid=\"${chatflowid}\"\n            apiHost=\"${baseURL}\"\n            theme={{\n                ${buttonConfig(true)},\n                ${chatwindowConfig(true)}\n            }}\n        />\n    );\n};`\n}\n\nconst embedFullpageHtmlCodeCustomization = (chatflowid) => {\n    return `<flowise-fullchatbot></flowise-fullchatbot>\n<script type=\"module\">\n    import Chatbot from \"https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js\"\n    Chatbot.initFull({\n        chatflowid: \"${chatflowid}\",\n        apiHost: \"${baseURL}\",\n        theme: {\n            ${chatwindowConfig()}\n        }\n    })\n</script>`\n}\n\nconst embedFullpageReactCodeCustomization = (chatflowid) => {\n    return `import { FullPageChat } from \"flowise-embed-react\"\n\nconst App = () => {\n    return (\n        <FullPageChat\n            chatflowid=\"${chatflowid}\"\n            apiHost=\"${baseURL}\"\n            theme={{\n                ${chatwindowConfig(true)}\n            }}\n        />\n    );\n};`\n}\n\nconst EmbedChat = ({ chatflowid }) => {\n    const codes = ['Popup Html', 'Fullpage Html', 'Popup React', 'Fullpage React']\n    const [value, setValue] = useState(0)\n    const [embedChatCheckboxVal, setEmbedChatCheckbox] = useState(false)\n\n    const onCheckBoxEmbedChatChanged = (newVal) => {\n        setEmbedChatCheckbox(newVal)\n    }\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue)\n    }\n\n    const getCode = (codeLang) => {\n        switch (codeLang) {\n            case 'Popup Html':\n                return embedPopupHtmlCode(chatflowid)\n            case 'Fullpage Html':\n                return embedFullpageHtmlCode(chatflowid)\n            case 'Popup React':\n                return embedPopupReactCode(chatflowid)\n            case 'Fullpage React':\n                return embedFullpageReactCode(chatflowid)\n            default:\n                return ''\n        }\n    }\n\n    const getCodeCustomization = (codeLang) => {\n        switch (codeLang) {\n            case 'Popup Html':\n                return embedPopupHtmlCodeCustomization(chatflowid)\n            case 'Fullpage Html':\n                return embedFullpageHtmlCodeCustomization(chatflowid)\n            case 'Popup React':\n                return embedPopupReactCodeCustomization(chatflowid)\n            case 'Fullpage React':\n                return embedFullpageReactCodeCustomization(chatflowid)\n            default:\n                return ''\n        }\n    }\n\n    return (\n        <>\n            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                <div style={{ flex: 80 }}>\n                    <Tabs value={value} onChange={handleChange} aria-label='tabs'>\n                        {codes.map((codeLang, index) => (\n                            <Tab key={index} label={codeLang} {...a11yProps(index)}></Tab>\n                        ))}\n                    </Tabs>\n                </div>\n            </div>\n            <div style={{ marginTop: 10 }}></div>\n            {codes.map((codeLang, index) => (\n                <TabPanel key={index} value={value} index={index}>\n                    {(value === 0 || value === 1) && (\n                        <>\n                            <span>\n                                Paste this anywhere in the <code>{`<body>`}</code> tag of your html file.\n                                <p>\n                                    You can also specify a&nbsp;\n                                    <a\n                                        rel='noreferrer'\n                                        target='_blank'\n                                        href='https://www.npmjs.com/package/flowise-embed?activeTab=versions'\n                                    >\n                                        version\n                                    </a>\n                                    :&nbsp;<code>{`https://cdn.jsdelivr.net/npm/flowise-embed@<version>/dist/web.js`}</code>\n                                </p>\n                            </span>\n                            <div style={{ height: 10 }}></div>\n                        </>\n                    )}\n                    <CopyBlock theme={atomOneDark} text={getCode(codeLang)} language='javascript' showLineNumbers={false} wrapLines />\n\n                    <CheckboxInput label='Show Embed Chat Config' value={embedChatCheckboxVal} onChange={onCheckBoxEmbedChatChanged} />\n\n                    {embedChatCheckboxVal && (\n                        <CopyBlock\n                            theme={atomOneDark}\n                            text={getCodeCustomization(codeLang)}\n                            language='javascript'\n                            showLineNumbers={false}\n                            wrapLines\n                        />\n                    )}\n                </TabPanel>\n            ))}\n        </>\n    )\n}\n\nEmbedChat.propTypes = {\n    chatflowid: PropTypes.string\n}\n\nexport default EmbedChat\n","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgPython(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: \"mr-1.5\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    role: \"img\",\n    width: \"1em\",\n    height: \"1em\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15.84.5a16.4,16.4,0,0,0-3.57.32C9.1,1.39,8.53,2.53,8.53,4.64V7.48H16v1H5.77a4.73,4.73,0,0,0-4.7,3.74,14.82,14.82,0,0,0,0,7.54c.57,2.28,1.86,3.82,4,3.82h2.6V20.14a4.73,4.73,0,0,1,4.63-4.63h7.38a3.72,3.72,0,0,0,3.73-3.73V4.64A4.16,4.16,0,0,0,19.65.82,20.49,20.49,0,0,0,15.84.5ZM11.78,2.77a1.39,1.39,0,0,1,1.38,1.46,1.37,1.37,0,0,1-1.38,1.38A1.42,1.42,0,0,1,10.4,4.23,1.44,1.44,0,0,1,11.78,2.77Z\",\n    fill: \"#5a9fd4\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.16,31.5a16.4,16.4,0,0,0,3.57-.32c3.17-.57,3.74-1.71,3.74-3.82V24.52H16v-1H26.23a4.73,4.73,0,0,0,4.7-3.74,14.82,14.82,0,0,0,0-7.54c-.57-2.28-1.86-3.82-4-3.82h-2.6v3.41a4.73,4.73,0,0,1-4.63,4.63H12.35a3.72,3.72,0,0,0-3.73,3.73v7.14a4.16,4.16,0,0,0,3.73,3.82A20.49,20.49,0,0,0,16.16,31.5Zm4.06-2.27a1.39,1.39,0,0,1-1.38-1.46,1.37,1.37,0,0,1,1.38-1.38,1.42,1.42,0,0,1,1.38,1.38A1.44,1.44,0,0,1,20.22,29.23Z\",\n    fill: \"#ffd43b\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPython);\nexport default __webpack_public_path__ + \"static/media/python.b0fd2326ee21d9c5524d0d243379c879.svg\";\nexport { ForwardRef as ReactComponent };","var _rect, _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgJavascript(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: \"mr-1.5\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    role: \"img\",\n    width: \"1em\",\n    height: \"1em\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 32,\n    height: 32,\n    fill: \"#f7df1e\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21.5,25a3.27,3.27,0,0,0,3,1.83c1.25,0,2-.63,2-1.49,0-1-.81-1.39-2.19-2L23.56,23C21.39,22.1,20,20.94,20,18.49c0-2.25,1.72-4,4.41-4a4.44,4.44,0,0,1,4.27,2.41l-2.34,1.5a2,2,0,0,0-1.93-1.29,1.31,1.31,0,0,0-1.44,1.29c0,.9.56,1.27,1.85,1.83l.75.32c2.55,1.1,4,2.21,4,4.72,0,2.71-2.12,4.19-5,4.19a5.78,5.78,0,0,1-5.48-3.07Zm-10.63.26c.48.84.91,1.55,1.94,1.55s1.61-.39,1.61-1.89V14.69h3V25c0,3.11-1.83,4.53-4.49,4.53a4.66,4.66,0,0,1-4.51-2.75Z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgJavascript);\nexport default __webpack_public_path__ + \"static/media/javascript.0baf38b3d3f5b2d24e87fb5cc2fcfea0.svg\";\nexport { ForwardRef as ReactComponent };","var _rect, _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgCUrl(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: \"mr-1.5\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    role: \"img\",\n    width: \"1em\",\n    height: \"1em\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 32,\n    height: 32,\n    rx: 4,\n    fill: \"#1683a5\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.71,14A5,5,0,0,1,8.82,9.29l2.64-2.2c1.67-1.37,2.52-1.41,4.6-1.41H21.7c1.19,0,2.45.27,2.45,1.79s-1.4,1.78-2.45,1.78H15.44a3.31,3.31,0,0,0-2,.89L11.24,12c-.55.44-1,.81-1,1.52v4.41c0,.7.41,1.07,1,1.52l2.16,1.82a3.34,3.34,0,0,0,2,.89H21.7c1.05,0,2.45.23,2.45,1.78s-1.26,1.78-2.45,1.78H16.06c-2.08,0-2.94,0-4.6-1.4L8.82,22.09A5.05,5.05,0,0,1,6.71,17.4Z\",\n    fill: \"#fff\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgCUrl);\nexport default __webpack_public_path__ + \"static/media/cURL.37eb8ccceafb9e8630a53aa0eb756128.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgEmbed(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 512 512\",\n    focusable: \"false\",\n    className: \"chakra-icon css-lbf1w4\",\n    id: \"Capa_1\",\n    enableBackground: \"new 0 0 512 512\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m512 141.17v229.66c0 39.96-32.51 72.47-72.46 72.47h-367.08c-39.95 0-72.46-32.51-72.46-72.47v-229.66c0-39.96 32.51-72.47 72.46-72.47h367.08c39.95 0 72.46 32.51 72.46 72.47z\",\n    fill: \"#6aa9ff\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m512 141.17v229.66c0 39.96-32.51 72.47-72.46 72.47h-183.54v-374.6h183.54c39.95 0 72.46 32.51 72.46 72.47z\",\n    fill: \"#4987ea\"\n  }), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m146.16 349.223-78.4-78.4c-5.858-5.858-5.858-15.355 0-21.213l86.833-86.833c5.857-5.858 15.355-5.858 21.213 0s5.858 15.355 0 21.213l-76.226 76.226 67.793 67.794c5.858 5.858 5.858 15.355 0 21.213-5.857 5.858-15.355 5.859-21.213 0z\",\n    fill: \"#f0f7ff\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m336.194 349.223c-5.858-5.858-5.858-15.355 0-21.213l76.226-76.227-67.793-67.794c-5.858-5.858-5.858-15.355 0-21.213 5.857-5.858 15.355-5.858 21.213 0l78.4 78.4c5.858 5.858 5.858 15.355 0 21.213l-86.833 86.833c-5.856 5.859-15.355 5.86-21.213.001z\",\n    fill: \"#dfe7f4\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m309.54 148.7-53.54 151.6-25.78 72.99c-2.792 7.888-11.443 11.903-19.14 9.15-7.81-2.76-11.91-11.33-9.15-19.14l54.07-153.1 25.25-71.49c2.76-7.81 11.33-11.91 19.14-9.15s11.91 11.33 9.15 19.14z\",\n    fill: \"#f0f7ff\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m309.54 148.7-53.54 151.6v-90.1l25.25-71.49c2.76-7.81 11.33-11.91 19.14-9.15s11.91 11.33 9.15 19.14z\",\n    fill: \"#dfe7f4\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgEmbed);\nexport default __webpack_public_path__ + \"static/media/embed.289f71beedf481a4fab870e9fed16fec.svg\";\nexport { ForwardRef as ReactComponent };","import client from './client'\n\nconst getConfig = (id) => client.get(`/flow-config/${id}`)\n\nexport default {\n    getConfig\n}\n","import PropTypes from 'prop-types'\nimport { TableContainer, Table, TableHead, TableCell, TableRow, TableBody, Paper } from '@mui/material'\n\nexport const TableViewOnly = ({ columns, rows }) => {\n    return (\n        <>\n            <TableContainer component={Paper}>\n                <Table sx={{ minWidth: 650 }} aria-label='simple table'>\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((col, index) => (\n                                <TableCell key={index}>{col.charAt(0).toUpperCase() + col.slice(1)}</TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.map((row, index) => (\n                            <TableRow key={index} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\n                                {Object.keys(row).map((key, index) => (\n                                    <TableCell key={index}>{row[key]}</TableCell>\n                                ))}\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    )\n}\n\nTableViewOnly.propTypes = {\n    rows: PropTypes.array,\n    columns: PropTypes.array\n}\n","import { createPortal } from 'react-dom'\nimport { useNavigate } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport { Tabs, Tab, Dialog, DialogContent, DialogTitle, Box } from '@mui/material'\nimport { CopyBlock, atomOneDark } from 'react-code-blocks'\n\n// Project import\nimport { Dropdown } from 'ui-component/dropdown/Dropdown'\nimport ShareChatbot from './ShareChatbot'\nimport EmbedChat from './EmbedChat'\n\n// Const\nimport { baseURL } from 'store/constant'\nimport { SET_CHATFLOW } from 'store/actions'\n\n// Images\nimport pythonSVG from 'assets/images/python.svg'\nimport javascriptSVG from 'assets/images/javascript.svg'\nimport cURLSVG from 'assets/images/cURL.svg'\nimport EmbedSVG from 'assets/images/embed.svg'\nimport ShareChatbotSVG from 'assets/images/sharing.png'\n\n// API\nimport apiKeyApi from 'api/apikey'\nimport chatflowsApi from 'api/chatflows'\nimport configApi from 'api/config'\n\n// Hooks\nimport useApi from 'hooks/useApi'\nimport { CheckboxInput } from 'ui-component/checkbox/Checkbox'\nimport { TableViewOnly } from 'ui-component/table/Table'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`attachment-tabpanel-${index}`}\n            aria-labelledby={`attachment-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\n        </div>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `attachment-tab-${index}`,\n        'aria-controls': `attachment-tabpanel-${index}`\n    }\n}\n\nconst unshiftFiles = (configData) => {\n    const filesConfig = configData.find((config) => config.name === 'files')\n    if (filesConfig) {\n        configData = configData.filter((config) => config.name !== 'files')\n        configData.unshift(filesConfig)\n    }\n    return configData\n}\n\nconst getConfigExamplesForJS = (configData, bodyType) => {\n    let finalStr = ''\n    configData = unshiftFiles(configData)\n    const loop = Math.min(configData.length, 4)\n    for (let i = 0; i < loop; i += 1) {\n        const config = configData[i]\n        let exampleVal = `\"example\"`\n        if (config.type === 'string') exampleVal = `\"example\"`\n        else if (config.type === 'boolean') exampleVal = `true`\n        else if (config.type === 'number') exampleVal = `1`\n        else if (config.name === 'files') exampleVal = `input.files[0]`\n        finalStr += bodyType === 'json' ? `\\n      \"${config.name}\": ${exampleVal},` : `formData.append(\"${config.name}\", ${exampleVal})\\n`\n        if (i === loop - 1 && bodyType !== 'json') `formData.append(\"question\", \"Hey, how are you?\")\\n`\n    }\n    return finalStr\n}\n\nconst getConfigExamplesForPython = (configData, bodyType) => {\n    let finalStr = ''\n    configData = unshiftFiles(configData)\n    const loop = Math.min(configData.length, 4)\n    for (let i = 0; i < loop; i += 1) {\n        const config = configData[i]\n        let exampleVal = `\"example\"`\n        if (config.type === 'string') exampleVal = `\"example\"`\n        else if (config.type === 'boolean') exampleVal = `true`\n        else if (config.type === 'number') exampleVal = `1`\n        else if (config.name === 'files') exampleVal = `('example${config.type}', open('example${config.type}', 'rb'))`\n        finalStr += bodyType === 'json' ? `\\n        \"${config.name}\": ${exampleVal},` : `\\n    \"${config.name}\": ${exampleVal},`\n        if (i === loop - 1 && bodyType !== 'json') finalStr += `\\n    \"question\": \"Hey, how are you?\"\\n`\n    }\n    return finalStr\n}\n\nconst getConfigExamplesForCurl = (configData, bodyType) => {\n    let finalStr = ''\n    configData = unshiftFiles(configData)\n    const loop = Math.min(configData.length, 4)\n    for (let i = 0; i < loop; i += 1) {\n        const config = configData[i]\n        let exampleVal = `example`\n        if (config.type === 'string') exampleVal = bodyType === 'json' ? `\"example\"` : `example`\n        else if (config.type === 'boolean') exampleVal = `true`\n        else if (config.type === 'number') exampleVal = `1`\n        else if (config.name === 'files') exampleVal = `@/home/user1/Desktop/example${config.type}`\n        finalStr += bodyType === 'json' ? `\"${config.name}\": ${exampleVal}` : `\\n     -F \"${config.name}=${exampleVal}\"`\n        if (i === loop - 1) finalStr += bodyType === 'json' ? ` }` : ` \\\\\\n     -F \"question=Hey, how are you?\"`\n        else finalStr += bodyType === 'json' ? `, ` : ` \\\\`\n    }\n    return finalStr\n}\n\nconst APICodeDialog = ({ show, dialogProps, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    const codes = ['Embed', 'Python', 'JavaScript', 'cURL', 'Share Chatbot']\n    const [value, setValue] = useState(0)\n    const [keyOptions, setKeyOptions] = useState([])\n    const [apiKeys, setAPIKeys] = useState([])\n    const [chatflowApiKeyId, setChatflowApiKeyId] = useState('')\n    const [selectedApiKey, setSelectedApiKey] = useState({})\n    const [checkboxVal, setCheckbox] = useState(false)\n\n    const getAllAPIKeysApi = useApi(apiKeyApi.getAllAPIKeys)\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\n    const getIsChatflowStreamingApi = useApi(chatflowsApi.getIsChatflowStreaming)\n    const getConfigApi = useApi(configApi.getConfig)\n\n    const onCheckBoxChanged = (newVal) => {\n        setCheckbox(newVal)\n        if (newVal) {\n            getConfigApi.request(dialogProps.chatflowid)\n        }\n    }\n\n    const onApiKeySelected = (keyValue) => {\n        if (keyValue === 'addnewkey') {\n            navigate('/apikey')\n            return\n        }\n        setChatflowApiKeyId(keyValue)\n        setSelectedApiKey(apiKeys.find((key) => key.id === keyValue))\n        const updateBody = {\n            apikeyid: keyValue\n        }\n        updateChatflowApi.request(dialogProps.chatflowid, updateBody)\n    }\n\n    useEffect(() => {\n        if (updateChatflowApi.data) {\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\n        }\n    }, [updateChatflowApi.data, dispatch])\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue)\n    }\n\n    const getCode = (codeLang) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\n\ndef query(payload):\n    response = requests.post(API_URL, json=payload)\n    return response.json()\n    \noutput = query({\n    \"question\": \"Hey, how are you?\",\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\"question\": \"Hey, how are you?\"}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\"}' \\\\\n     -H \"Content-Type: application/json\"`\n        }\n        return ''\n    }\n\n    const getCodeWithAuthorization = (codeLang) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\n\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\n    \noutput = query({\n    \"question\": \"Hey, how are you?\",\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            headers: {\n                Authorization: \"Bearer ${selectedApiKey?.apiKey}\",\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\",\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\"question\": \"Hey, how are you?\"}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\"}' \\\\\n     -H \"Content-Type: application/json\" \\\\\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\n        }\n        return ''\n    }\n\n    const getLang = (codeLang) => {\n        if (codeLang === 'Python') {\n            return 'python'\n        } else if (codeLang === 'JavaScript') {\n            return 'javascript'\n        } else if (codeLang === 'cURL') {\n            return 'bash'\n        }\n        return 'python'\n    }\n\n    const getSVG = (codeLang) => {\n        if (codeLang === 'Python') {\n            return pythonSVG\n        } else if (codeLang === 'JavaScript') {\n            return javascriptSVG\n        } else if (codeLang === 'Embed') {\n            return EmbedSVG\n        } else if (codeLang === 'cURL') {\n            return cURLSVG\n        } else if (codeLang === 'Share Chatbot') {\n            return ShareChatbotSVG\n        }\n        return pythonSVG\n    }\n\n    // ----------------------------CONFIG FORM DATA --------------------------//\n\n    const getConfigCodeWithFormData = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\n\n# use form data to upload files\nform_data = {${getConfigExamplesForPython(configData, 'formData')}}\n\ndef query(form_data):\n    response = requests.post(API_URL, files=form_data)\n    return response.json()\n\noutput = query(form_data)\n`\n        } else if (codeLang === 'JavaScript') {\n            return `// use FormData to upload files\nlet formData = new FormData();\n${getConfigExamplesForJS(configData, 'formData')}\nasync function query(formData) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            body: formData\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery(formData).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\${getConfigExamplesForCurl(configData, 'formData')} \\\\\n     -H \"Content-Type: multipart/form-data\"`\n        }\n        return ''\n    }\n\n    // ----------------------------CONFIG FORM DATA with AUTH--------------------------//\n\n    const getConfigCodeWithFormDataWithAuth = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\n\n# use form data to upload files\nform_data = {${getConfigExamplesForPython(configData, 'formData')}}\n\ndef query(form_data):\n    response = requests.post(API_URL, headers=headers, files=form_data)\n    return response.json()\n\noutput = query(form_data)\n`\n        } else if (codeLang === 'JavaScript') {\n            return `// use FormData to upload files\nlet formData = new FormData();\n${getConfigExamplesForJS(configData, 'formData')}\nasync function query(formData) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            headers: { Authorization: \"Bearer ${selectedApiKey?.apiKey}\" },\n            method: \"POST\",\n            body: formData\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery(formData).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\${getConfigExamplesForCurl(configData, 'formData')} \\\\\n     -H \"Content-Type: multipart/form-data\" \\\\\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\n        }\n        return ''\n    }\n\n    // ----------------------------CONFIG JSON--------------------------//\n\n    const getConfigCode = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\n\ndef query(payload):\n    response = requests.post(API_URL, json=payload)\n    return response.json()\n\noutput = query({\n    \"question\": \"Hey, how are you?\",\n    \"overrideConfig\": {${getConfigExamplesForPython(configData, 'json')}\n    }\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\n  \"question\": \"Hey, how are you?\",\n  \"overrideConfig\": {${getConfigExamplesForJS(configData, 'json')}\n  }\n}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\", \"overrideConfig\": {${getConfigExamplesForCurl(configData, 'json')}}' \\\\\n     -H \"Content-Type: application/json\"`\n        }\n        return ''\n    }\n\n    // ----------------------------CONFIG JSON with AUTH--------------------------//\n\n    const getConfigCodeWithAuthorization = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\n\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\n\noutput = query({\n    \"question\": \"Hey, how are you?\",\n    \"overrideConfig\": {${getConfigExamplesForPython(configData, 'json')}\n    }\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            headers: {\n                Authorization: \"Bearer ${selectedApiKey?.apiKey}\",\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\",\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\n  \"question\": \"Hey, how are you?\",\n  \"overrideConfig\": {${getConfigExamplesForJS(configData, 'json')}\n  }\n}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\", \"overrideConfig\": {${getConfigExamplesForCurl(configData, 'json')}}' \\\\\n     -H \"Content-Type: application/json\" \\\\\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\n        }\n        return ''\n    }\n\n    useEffect(() => {\n        if (getAllAPIKeysApi.data) {\n            const options = [\n                {\n                    label: 'No Authorization',\n                    name: ''\n                }\n            ]\n            for (const key of getAllAPIKeysApi.data) {\n                options.push({\n                    label: key.keyName,\n                    name: key.id\n                })\n            }\n            options.push({\n                label: '- Add New Key -',\n                name: 'addnewkey'\n            })\n            setKeyOptions(options)\n            setAPIKeys(getAllAPIKeysApi.data)\n\n            if (dialogProps.chatflowApiKeyId) {\n                setChatflowApiKeyId(dialogProps.chatflowApiKeyId)\n                setSelectedApiKey(getAllAPIKeysApi.data.find((key) => key.id === dialogProps.chatflowApiKeyId))\n            }\n        }\n    }, [dialogProps, getAllAPIKeysApi.data])\n\n    useEffect(() => {\n        if (show) {\n            getAllAPIKeysApi.request()\n            getIsChatflowStreamingApi.request(dialogProps.chatflowid)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [show])\n\n    const component = show ? (\n        <Dialog\n            open={show}\n            fullWidth\n            maxWidth='md'\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title}\n            </DialogTitle>\n            <DialogContent>\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                    <div style={{ flex: 80 }}>\n                        <Tabs value={value} onChange={handleChange} aria-label='tabs'>\n                            {codes.map((codeLang, index) => (\n                                <Tab\n                                    icon={\n                                        <img style={{ objectFit: 'cover', height: 15, width: 'auto' }} src={getSVG(codeLang)} alt='code' />\n                                    }\n                                    iconPosition='start'\n                                    key={index}\n                                    label={codeLang}\n                                    {...a11yProps(index)}\n                                ></Tab>\n                            ))}\n                        </Tabs>\n                    </div>\n                    <div style={{ flex: 20 }}>\n                        <Dropdown\n                            name='SelectKey'\n                            disableClearable={true}\n                            options={keyOptions}\n                            onSelect={(newValue) => onApiKeySelected(newValue)}\n                            value={dialogProps.chatflowApiKeyId ?? chatflowApiKeyId ?? 'Choose an API key'}\n                        />\n                    </div>\n                </div>\n                <div style={{ marginTop: 10 }}></div>\n                {codes.map((codeLang, index) => (\n                    <TabPanel key={index} value={value} index={index}>\n                        {(codeLang === 'Embed' || codeLang === 'Share Chatbot') && chatflowApiKeyId && (\n                            <>\n                                <p>You cannot use API key while embedding/sharing chatbot.</p>\n                                <p>\n                                    Please select <b>&quot;No Authorization&quot;</b> from the dropdown at the top right corner.\n                                </p>\n                            </>\n                        )}\n                        {codeLang === 'Embed' && !chatflowApiKeyId && <EmbedChat chatflowid={dialogProps.chatflowid} />}\n                        {codeLang !== 'Embed' && codeLang !== 'Share Chatbot' && (\n                            <>\n                                <CopyBlock\n                                    theme={atomOneDark}\n                                    text={chatflowApiKeyId ? getCodeWithAuthorization(codeLang) : getCode(codeLang)}\n                                    language={getLang(codeLang)}\n                                    showLineNumbers={false}\n                                    wrapLines\n                                />\n                                <CheckboxInput label='Show Input Config' value={checkboxVal} onChange={onCheckBoxChanged} />\n                                {checkboxVal && getConfigApi.data && getConfigApi.data.length > 0 && (\n                                    <>\n                                        <TableViewOnly rows={getConfigApi.data} columns={Object.keys(getConfigApi.data[0])} />\n                                        <CopyBlock\n                                            theme={atomOneDark}\n                                            text={\n                                                chatflowApiKeyId\n                                                    ? dialogProps.isFormDataRequired\n                                                        ? getConfigCodeWithFormDataWithAuth(codeLang, getConfigApi.data)\n                                                        : getConfigCodeWithAuthorization(codeLang, getConfigApi.data)\n                                                    : dialogProps.isFormDataRequired\n                                                    ? getConfigCodeWithFormData(codeLang, getConfigApi.data)\n                                                    : getConfigCode(codeLang, getConfigApi.data)\n                                            }\n                                            language={getLang(codeLang)}\n                                            showLineNumbers={false}\n                                            wrapLines\n                                        />\n                                    </>\n                                )}\n                                {getIsChatflowStreamingApi.data?.isStreaming && (\n                                    <p>\n                                        Read&nbsp;\n                                        <a rel='noreferrer' target='_blank' href='https://docs.flowiseai.com/how-to-use#streaming'>\n                                            here\n                                        </a>\n                                        &nbsp;on how to stream response back to application\n                                    </p>\n                                )}\n                            </>\n                        )}\n                        {codeLang === 'Share Chatbot' && !chatflowApiKeyId && (\n                            <ShareChatbot isSessionMemory={dialogProps.isSessionMemory} />\n                        )}\n                    </TabPanel>\n                ))}\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nAPICodeDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func\n}\n\nexport default APICodeDialog\n","import PropTypes from 'prop-types'\nimport { useNavigate } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useEffect, useRef, useState } from 'react'\n\n// material-ui\nimport { useTheme } from '@mui/material/styles'\nimport { Avatar, Box, ButtonBase, Typography, Stack, TextField } from '@mui/material'\n\n// icons\nimport { IconSettings, IconChevronLeft, IconDeviceFloppy, IconPencil, IconCheck, IconX, IconCode } from '@tabler/icons'\n\n// project imports\nimport Settings from 'views/settings'\nimport SaveChatflowDialog from 'ui-component/dialog/SaveChatflowDialog'\nimport APICodeDialog from 'views/chatflows/APICodeDialog'\n\n// API\nimport chatflowsApi from 'api/chatflows'\n\n// Hooks\nimport useApi from 'hooks/useApi'\n\n// utils\nimport { generateExportFlowData } from 'utils/genericHelper'\nimport { uiBaseURL } from 'store/constant'\nimport { SET_CHATFLOW } from 'store/actions'\n\n// ==============================|| CANVAS HEADER ||============================== //\n\nconst CanvasHeader = ({ chatflow, handleSaveFlow, handleDeleteFlow, handleLoadFlow }) => {\n    const theme = useTheme()\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    const flowNameRef = useRef()\n    const settingsRef = useRef()\n\n    const [isEditingFlowName, setEditingFlowName] = useState(null)\n    const [flowName, setFlowName] = useState('')\n    const [isSettingsOpen, setSettingsOpen] = useState(false)\n    const [flowDialogOpen, setFlowDialogOpen] = useState(false)\n    const [apiDialogOpen, setAPIDialogOpen] = useState(false)\n    const [apiDialogProps, setAPIDialogProps] = useState({})\n\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\n    const canvas = useSelector((state) => state.canvas)\n\n    const onSettingsItemClick = (setting) => {\n        setSettingsOpen(false)\n\n        if (setting === 'deleteChatflow') {\n            handleDeleteFlow()\n        } else if (setting === 'duplicateChatflow') {\n            try {\n                localStorage.setItem('duplicatedFlowData', chatflow.flowData)\n                window.open(`${uiBaseURL}/canvas`, '_blank')\n            } catch (e) {\n                console.error(e)\n            }\n        } else if (setting === 'exportChatflow') {\n            try {\n                const flowData = JSON.parse(chatflow.flowData)\n                let dataStr = JSON.stringify(generateExportFlowData(flowData))\n                let dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)\n\n                let exportFileDefaultName = `${chatflow.name} Chatflow.json`\n\n                let linkElement = document.createElement('a')\n                linkElement.setAttribute('href', dataUri)\n                linkElement.setAttribute('download', exportFileDefaultName)\n                linkElement.click()\n            } catch (e) {\n                console.error(e)\n            }\n        }\n    }\n\n    const onUploadFile = (file) => {\n        setSettingsOpen(false)\n        handleLoadFlow(file)\n    }\n\n    const submitFlowName = () => {\n        if (chatflow.id) {\n            const updateBody = {\n                name: flowNameRef.current.value\n            }\n            updateChatflowApi.request(chatflow.id, updateBody)\n        }\n    }\n\n    const onAPIDialogClick = () => {\n        // If file type is file, isFormDataRequired = true\n        let isFormDataRequired = false\n        try {\n            const flowData = JSON.parse(chatflow.flowData)\n            const nodes = flowData.nodes\n            for (const node of nodes) {\n                if (node.data.inputParams.find((param) => param.type === 'file')) {\n                    isFormDataRequired = true\n                    break\n                }\n            }\n        } catch (e) {\n            console.error(e)\n        }\n\n        // If sessionId memory, isSessionMemory = true\n        let isSessionMemory = false\n        try {\n            const flowData = JSON.parse(chatflow.flowData)\n            const nodes = flowData.nodes\n            for (const node of nodes) {\n                if (node.data.inputParams.find((param) => param.name === 'sessionId')) {\n                    isSessionMemory = true\n                    break\n                }\n            }\n        } catch (e) {\n            console.error(e)\n        }\n\n        setAPIDialogProps({\n            title: 'Embed in website or use as API',\n            chatflowid: chatflow.id,\n            chatflowApiKeyId: chatflow.apikeyid,\n            isFormDataRequired,\n            isSessionMemory\n        })\n        setAPIDialogOpen(true)\n    }\n\n    const onSaveChatflowClick = () => {\n        if (chatflow.id) handleSaveFlow(flowName)\n        else setFlowDialogOpen(true)\n    }\n\n    const onConfirmSaveName = (flowName) => {\n        setFlowDialogOpen(false)\n        handleSaveFlow(flowName)\n    }\n\n    useEffect(() => {\n        if (updateChatflowApi.data) {\n            setFlowName(updateChatflowApi.data.name)\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\n        }\n        setEditingFlowName(false)\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [updateChatflowApi.data])\n\n    useEffect(() => {\n        if (chatflow) {\n            setFlowName(chatflow.name)\n        }\n    }, [chatflow])\n\n    return (\n        <>\n            <Box>\n                <ButtonBase title='Back' sx={{ borderRadius: '50%' }}>\n                    <Avatar\n                        variant='rounded'\n                        sx={{\n                            ...theme.typography.commonAvatar,\n                            ...theme.typography.mediumAvatar,\n                            transition: 'all .2s ease-in-out',\n                            background: theme.palette.secondary.light,\n                            color: theme.palette.secondary.dark,\n                            '&:hover': {\n                                background: theme.palette.secondary.dark,\n                                color: theme.palette.secondary.light\n                            }\n                        }}\n                        color='inherit'\n                        onClick={() =>\n                            window.history.state && window.history.state.idx > 0 ? navigate(-1) : navigate('/', { replace: true })\n                        }\n                    >\n                        <IconChevronLeft stroke={1.5} size='1.3rem' />\n                    </Avatar>\n                </ButtonBase>\n            </Box>\n            <Box sx={{ flexGrow: 1 }}>\n                {!isEditingFlowName && (\n                    <Stack flexDirection='row'>\n                        <Typography\n                            sx={{\n                                fontSize: '1.5rem',\n                                fontWeight: 600,\n                                ml: 2\n                            }}\n                        >\n                            {canvas.isDirty && <strong style={{ color: theme.palette.orange.main }}>*</strong>} {flowName}\n                        </Typography>\n                        {chatflow?.id && (\n                            <ButtonBase title='Edit Name' sx={{ borderRadius: '50%' }}>\n                                <Avatar\n                                    variant='rounded'\n                                    sx={{\n                                        ...theme.typography.commonAvatar,\n                                        ...theme.typography.mediumAvatar,\n                                        transition: 'all .2s ease-in-out',\n                                        ml: 1,\n                                        background: theme.palette.secondary.light,\n                                        color: theme.palette.secondary.dark,\n                                        '&:hover': {\n                                            background: theme.palette.secondary.dark,\n                                            color: theme.palette.secondary.light\n                                        }\n                                    }}\n                                    color='inherit'\n                                    onClick={() => setEditingFlowName(true)}\n                                >\n                                    <IconPencil stroke={1.5} size='1.3rem' />\n                                </Avatar>\n                            </ButtonBase>\n                        )}\n                    </Stack>\n                )}\n                {isEditingFlowName && (\n                    <Stack flexDirection='row'>\n                        <TextField\n                            size='small'\n                            inputRef={flowNameRef}\n                            sx={{\n                                width: '50%',\n                                ml: 2\n                            }}\n                            defaultValue={flowName}\n                        />\n                        <ButtonBase title='Save Name' sx={{ borderRadius: '50%' }}>\n                            <Avatar\n                                variant='rounded'\n                                sx={{\n                                    ...theme.typography.commonAvatar,\n                                    ...theme.typography.mediumAvatar,\n                                    transition: 'all .2s ease-in-out',\n                                    background: theme.palette.success.light,\n                                    color: theme.palette.success.dark,\n                                    ml: 1,\n                                    '&:hover': {\n                                        background: theme.palette.success.dark,\n                                        color: theme.palette.success.light\n                                    }\n                                }}\n                                color='inherit'\n                                onClick={submitFlowName}\n                            >\n                                <IconCheck stroke={1.5} size='1.3rem' />\n                            </Avatar>\n                        </ButtonBase>\n                        <ButtonBase title='Cancel' sx={{ borderRadius: '50%' }}>\n                            <Avatar\n                                variant='rounded'\n                                sx={{\n                                    ...theme.typography.commonAvatar,\n                                    ...theme.typography.mediumAvatar,\n                                    transition: 'all .2s ease-in-out',\n                                    background: theme.palette.error.light,\n                                    color: theme.palette.error.dark,\n                                    ml: 1,\n                                    '&:hover': {\n                                        background: theme.palette.error.dark,\n                                        color: theme.palette.error.light\n                                    }\n                                }}\n                                color='inherit'\n                                onClick={() => setEditingFlowName(false)}\n                            >\n                                <IconX stroke={1.5} size='1.3rem' />\n                            </Avatar>\n                        </ButtonBase>\n                    </Stack>\n                )}\n            </Box>\n            <Box>\n                {chatflow?.id && (\n                    <ButtonBase title='API Endpoint' sx={{ borderRadius: '50%', mr: 2 }}>\n                        <Avatar\n                            variant='rounded'\n                            sx={{\n                                ...theme.typography.commonAvatar,\n                                ...theme.typography.mediumAvatar,\n                                transition: 'all .2s ease-in-out',\n                                background: theme.palette.canvasHeader.deployLight,\n                                color: theme.palette.canvasHeader.deployDark,\n                                '&:hover': {\n                                    background: theme.palette.canvasHeader.deployDark,\n                                    color: theme.palette.canvasHeader.deployLight\n                                }\n                            }}\n                            color='inherit'\n                            onClick={onAPIDialogClick}\n                        >\n                            <IconCode stroke={1.5} size='1.3rem' />\n                        </Avatar>\n                    </ButtonBase>\n                )}\n                <ButtonBase title='Save Chatflow' sx={{ borderRadius: '50%', mr: 2 }}>\n                    <Avatar\n                        variant='rounded'\n                        sx={{\n                            ...theme.typography.commonAvatar,\n                            ...theme.typography.mediumAvatar,\n                            transition: 'all .2s ease-in-out',\n                            background: theme.palette.canvasHeader.saveLight,\n                            color: theme.palette.canvasHeader.saveDark,\n                            '&:hover': {\n                                background: theme.palette.canvasHeader.saveDark,\n                                color: theme.palette.canvasHeader.saveLight\n                            }\n                        }}\n                        color='inherit'\n                        onClick={onSaveChatflowClick}\n                    >\n                        <IconDeviceFloppy stroke={1.5} size='1.3rem' />\n                    </Avatar>\n                </ButtonBase>\n                <ButtonBase ref={settingsRef} title='Settings' sx={{ borderRadius: '50%' }}>\n                    <Avatar\n                        variant='rounded'\n                        sx={{\n                            ...theme.typography.commonAvatar,\n                            ...theme.typography.mediumAvatar,\n                            transition: 'all .2s ease-in-out',\n                            background: theme.palette.canvasHeader.settingsLight,\n                            color: theme.palette.canvasHeader.settingsDark,\n                            '&:hover': {\n                                background: theme.palette.canvasHeader.settingsDark,\n                                color: theme.palette.canvasHeader.settingsLight\n                            }\n                        }}\n                        onClick={() => setSettingsOpen(!isSettingsOpen)}\n                    >\n                        <IconSettings stroke={1.5} size='1.3rem' />\n                    </Avatar>\n                </ButtonBase>\n            </Box>\n            <Settings\n                chatflow={chatflow}\n                isSettingsOpen={isSettingsOpen}\n                anchorEl={settingsRef.current}\n                onClose={() => setSettingsOpen(false)}\n                onSettingsItemClick={onSettingsItemClick}\n                onUploadFile={onUploadFile}\n            />\n            <SaveChatflowDialog\n                show={flowDialogOpen}\n                dialogProps={{\n                    title: `Save New Chatflow`,\n                    confirmButtonName: 'Save',\n                    cancelButtonName: 'Cancel'\n                }}\n                onCancel={() => setFlowDialogOpen(false)}\n                onConfirm={onConfirmSaveName}\n            />\n            <APICodeDialog show={apiDialogOpen} dialogProps={apiDialogProps} onCancel={() => setAPIDialogOpen(false)} />\n        </>\n    )\n}\n\nCanvasHeader.propTypes = {\n    chatflow: PropTypes.object,\n    handleSaveFlow: PropTypes.func,\n    handleDeleteFlow: PropTypes.func,\n    handleLoadFlow: PropTypes.func\n}\n\nexport default CanvasHeader\n","import { styled } from '@mui/material/styles'\nimport { Fab } from '@mui/material'\n\nexport const StyledFab = styled(Fab)(({ theme, color = 'primary' }) => ({\n    color: 'white',\n    backgroundColor: theme.palette[color].main,\n    '&:hover': {\n        backgroundColor: theme.palette[color].main,\n        backgroundImage: `linear-gradient(rgb(0 0 0/10%) 0 0)`\n    }\n}))\n","import { useState, useRef, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport PropTypes from 'prop-types'\n\n// material-ui\nimport { useTheme } from '@mui/material/styles'\nimport {\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n    Box,\n    ClickAwayListener,\n    Divider,\n    InputAdornment,\n    List,\n    ListItemButton,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    OutlinedInput,\n    Paper,\n    Popper,\n    Stack,\n    Typography\n} from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\n// third-party\nimport PerfectScrollbar from 'react-perfect-scrollbar'\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard'\nimport Transitions from 'ui-component/extended/Transitions'\nimport { StyledFab } from 'ui-component/button/StyledFab'\n\n// icons\nimport { IconPlus, IconSearch, IconMinus, IconX } from '@tabler/icons'\n\n// const\nimport { baseURL } from 'store/constant'\n\n// ==============================|| ADD NODES||============================== //\n\nconst AddNodes = ({ nodesData, node }) => {\n    const theme = useTheme()\n    const customization = useSelector((state) => state.customization)\n\n    const [searchValue, setSearchValue] = useState('')\n    const [nodes, setNodes] = useState({})\n    const [open, setOpen] = useState(false)\n    const [categoryExpanded, setCategoryExpanded] = useState({})\n\n    const anchorRef = useRef(null)\n    const prevOpen = useRef(open)\n    const ps = useRef()\n\n    const scrollTop = () => {\n        const curr = ps.current\n        if (curr) {\n            curr.scrollTop = 0\n        }\n    }\n\n    const getSearchedNodes = (value) => {\n        const passed = nodesData.filter((nd) => {\n            const passesQuery = nd.name.toLowerCase().includes(value.toLowerCase())\n            const passesCategory = nd.category.toLowerCase().includes(value.toLowerCase())\n            return passesQuery || passesCategory\n        })\n        return passed\n    }\n\n    const filterSearch = (value) => {\n        setSearchValue(value)\n        setTimeout(() => {\n            if (value) {\n                const returnData = getSearchedNodes(value)\n                groupByCategory(returnData, true)\n                scrollTop()\n            } else if (value === '') {\n                groupByCategory(nodesData)\n                scrollTop()\n            }\n        }, 500)\n    }\n\n    const groupByCategory = (nodes, isFilter) => {\n        const accordianCategories = {}\n        const result = nodes.reduce(function (r, a) {\n            r[a.category] = r[a.category] || []\n            r[a.category].push(a)\n            accordianCategories[a.category] = isFilter ? true : false\n            return r\n        }, Object.create(null))\n        setNodes(result)\n        setCategoryExpanded(accordianCategories)\n    }\n\n    const handleAccordionChange = (category) => (event, isExpanded) => {\n        const accordianCategories = { ...categoryExpanded }\n        accordianCategories[category] = isExpanded\n        setCategoryExpanded(accordianCategories)\n    }\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return\n        }\n        setOpen(false)\n    }\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen)\n    }\n\n    const onDragStart = (event, node) => {\n        event.dataTransfer.setData('application/reactflow', JSON.stringify(node))\n        event.dataTransfer.effectAllowed = 'move'\n    }\n\n    useEffect(() => {\n        if (prevOpen.current === true && open === false) {\n            anchorRef.current.focus()\n        }\n\n        prevOpen.current = open\n    }, [open])\n\n    useEffect(() => {\n        if (node) setOpen(false)\n    }, [node])\n\n    useEffect(() => {\n        if (nodesData) groupByCategory(nodesData)\n    }, [nodesData])\n\n    return (\n        <>\n            <StyledFab\n                sx={{ left: 20, top: 20 }}\n                ref={anchorRef}\n                size='small'\n                color='primary'\n                aria-label='add'\n                title='Add Node'\n                onClick={handleToggle}\n            >\n                {open ? <IconMinus /> : <IconPlus />}\n            </StyledFab>\n            <Popper\n                placement='bottom-end'\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n                popperOptions={{\n                    modifiers: [\n                        {\n                            name: 'offset',\n                            options: {\n                                offset: [-40, 14]\n                            }\n                        }\n                    ]\n                }}\n                sx={{ zIndex: 1000 }}\n            >\n                {({ TransitionProps }) => (\n                    <Transitions in={open} {...TransitionProps}>\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\n                                    <Box sx={{ p: 2 }}>\n                                        <Stack>\n                                            <Typography variant='h4'>Add Nodes</Typography>\n                                        </Stack>\n                                        <OutlinedInput\n                                            sx={{ width: '100%', pr: 2, pl: 2, my: 2 }}\n                                            id='input-search-node'\n                                            value={searchValue}\n                                            onChange={(e) => filterSearch(e.target.value)}\n                                            placeholder='Search nodes'\n                                            startAdornment={\n                                                <InputAdornment position='start'>\n                                                    <IconSearch stroke={1.5} size='1rem' color={theme.palette.grey[500]} />\n                                                </InputAdornment>\n                                            }\n                                            endAdornment={\n                                                <InputAdornment\n                                                    position='end'\n                                                    sx={{\n                                                        cursor: 'pointer',\n                                                        color: theme.palette.grey[500],\n                                                        '&:hover': {\n                                                            color: theme.palette.grey[900]\n                                                        }\n                                                    }}\n                                                    title='Clear Search'\n                                                >\n                                                    <IconX\n                                                        stroke={1.5}\n                                                        size='1rem'\n                                                        onClick={() => filterSearch('')}\n                                                        style={{\n                                                            cursor: 'pointer'\n                                                        }}\n                                                    />\n                                                </InputAdornment>\n                                            }\n                                            aria-describedby='search-helper-text'\n                                            inputProps={{\n                                                'aria-label': 'weight'\n                                            }}\n                                        />\n                                        <Divider />\n                                    </Box>\n                                    <PerfectScrollbar\n                                        containerRef={(el) => {\n                                            ps.current = el\n                                        }}\n                                        style={{ height: '100%', maxHeight: 'calc(100vh - 320px)', overflowX: 'hidden' }}\n                                    >\n                                        <Box sx={{ p: 2 }}>\n                                            <List\n                                                sx={{\n                                                    width: '100%',\n                                                    maxWidth: 370,\n                                                    py: 0,\n                                                    borderRadius: '10px',\n                                                    [theme.breakpoints.down('md')]: {\n                                                        maxWidth: 370\n                                                    },\n                                                    '& .MuiListItemSecondaryAction-root': {\n                                                        top: 22\n                                                    },\n                                                    '& .MuiDivider-root': {\n                                                        my: 0\n                                                    },\n                                                    '& .list-container': {\n                                                        pl: 7\n                                                    }\n                                                }}\n                                            >\n                                                {Object.keys(nodes)\n                                                    .sort()\n                                                    .map((category) => (\n                                                        <Accordion\n                                                            expanded={categoryExpanded[category] || false}\n                                                            onChange={handleAccordionChange(category)}\n                                                            key={category}\n                                                            disableGutters\n                                                        >\n                                                            <AccordionSummary\n                                                                expandIcon={<ExpandMoreIcon />}\n                                                                aria-controls={`nodes-accordian-${category}`}\n                                                                id={`nodes-accordian-header-${category}`}\n                                                            >\n                                                                <Typography variant='h5'>{category}</Typography>\n                                                            </AccordionSummary>\n                                                            <AccordionDetails>\n                                                                {nodes[category].map((node, index) => (\n                                                                    <div\n                                                                        key={node.name}\n                                                                        onDragStart={(event) => onDragStart(event, node)}\n                                                                        draggable\n                                                                    >\n                                                                        <ListItemButton\n                                                                            sx={{\n                                                                                p: 0,\n                                                                                borderRadius: `${customization.borderRadius}px`,\n                                                                                cursor: 'move'\n                                                                            }}\n                                                                        >\n                                                                            <ListItem alignItems='center'>\n                                                                                <ListItemAvatar>\n                                                                                    <div\n                                                                                        style={{\n                                                                                            width: 50,\n                                                                                            height: 50,\n                                                                                            borderRadius: '50%',\n                                                                                            backgroundColor: 'white'\n                                                                                        }}\n                                                                                    >\n                                                                                        <img\n                                                                                            style={{\n                                                                                                width: '100%',\n                                                                                                height: '100%',\n                                                                                                padding: 10,\n                                                                                                objectFit: 'contain'\n                                                                                            }}\n                                                                                            alt={node.name}\n                                                                                            src={`${baseURL}/api/v1/node-icon/${node.name}`}\n                                                                                        />\n                                                                                    </div>\n                                                                                </ListItemAvatar>\n                                                                                <ListItemText\n                                                                                    sx={{ ml: 1 }}\n                                                                                    primary={node.label}\n                                                                                    secondary={node.description}\n                                                                                />\n                                                                            </ListItem>\n                                                                        </ListItemButton>\n                                                                        {index === nodes[category].length - 1 ? null : <Divider />}\n                                                                    </div>\n                                                                ))}\n                                                            </AccordionDetails>\n                                                        </Accordion>\n                                                    ))}\n                                            </List>\n                                        </Box>\n                                    </PerfectScrollbar>\n                                </MainCard>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Transitions>\n                )}\n            </Popper>\n        </>\n    )\n}\n\nAddNodes.propTypes = {\n    nodesData: PropTypes.array,\n    node: PropTypes.object\n}\n\nexport default AddNodes\n","import { IconClipboard, IconDownload } from '@tabler/icons'\nimport { memo, useState } from 'react'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport PropTypes from 'prop-types'\nimport { Box, IconButton, Popover, Typography } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\nconst programmingLanguages = {\n    javascript: '.js',\n    python: '.py',\n    java: '.java',\n    c: '.c',\n    cpp: '.cpp',\n    'c++': '.cpp',\n    'c#': '.cs',\n    ruby: '.rb',\n    php: '.php',\n    swift: '.swift',\n    'objective-c': '.m',\n    kotlin: '.kt',\n    typescript: '.ts',\n    go: '.go',\n    perl: '.pl',\n    rust: '.rs',\n    scala: '.scala',\n    haskell: '.hs',\n    lua: '.lua',\n    shell: '.sh',\n    sql: '.sql',\n    html: '.html',\n    css: '.css'\n}\n\nexport const CodeBlock = memo(({ language, chatflowid, isDialog, value }) => {\n    const theme = useTheme()\n    const [anchorEl, setAnchorEl] = useState(null)\n    const openPopOver = Boolean(anchorEl)\n\n    const handleClosePopOver = () => {\n        setAnchorEl(null)\n    }\n\n    const copyToClipboard = (event) => {\n        if (!navigator.clipboard || !navigator.clipboard.writeText) {\n            return\n        }\n\n        navigator.clipboard.writeText(value)\n        setAnchorEl(event.currentTarget)\n        setTimeout(() => {\n            handleClosePopOver()\n        }, 1500)\n    }\n\n    const downloadAsFile = () => {\n        const fileExtension = programmingLanguages[language] || '.file'\n        const suggestedFileName = `file-${chatflowid}${fileExtension}`\n        const fileName = suggestedFileName\n\n        if (!fileName) {\n            // user pressed cancel on prompt\n            return\n        }\n\n        const blob = new Blob([value], { type: 'text/plain' })\n        const url = URL.createObjectURL(blob)\n        const link = document.createElement('a')\n        link.download = fileName\n        link.href = url\n        link.style.display = 'none'\n        document.body.appendChild(link)\n        link.click()\n        document.body.removeChild(link)\n        URL.revokeObjectURL(url)\n    }\n\n    return (\n        <div style={{ width: isDialog ? '' : 300 }}>\n            <Box sx={{ color: 'white', background: theme.palette?.common.dark, p: 1, borderTopLeftRadius: 10, borderTopRightRadius: 10 }}>\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                    {language}\n                    <div style={{ flex: 1 }}></div>\n                    <IconButton size='small' title='Copy' color='success' onClick={copyToClipboard}>\n                        <IconClipboard />\n                    </IconButton>\n                    <Popover\n                        open={openPopOver}\n                        anchorEl={anchorEl}\n                        onClose={handleClosePopOver}\n                        anchorOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right'\n                        }}\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'left'\n                        }}\n                    >\n                        <Typography variant='h6' sx={{ pl: 1, pr: 1, color: 'white', background: theme.palette.success.dark }}>\n                            Copied!\n                        </Typography>\n                    </Popover>\n                    <IconButton size='small' title='Download' color='primary' onClick={downloadAsFile}>\n                        <IconDownload />\n                    </IconButton>\n                </div>\n            </Box>\n\n            <SyntaxHighlighter language={language} style={oneDark} customStyle={{ margin: 0 }}>\n                {value}\n            </SyntaxHighlighter>\n        </div>\n    )\n})\nCodeBlock.displayName = 'CodeBlock'\n\nCodeBlock.propTypes = {\n    language: PropTypes.string,\n    chatflowid: PropTypes.string,\n    isDialog: PropTypes.bool,\n    value: PropTypes.string\n}\n","import { memo } from 'react'\nimport ReactMarkdown from 'react-markdown'\n\nexport const MemoizedReactMarkdown = memo(ReactMarkdown, (prevProps, nextProps) => prevProps.children === nextProps.children)\n","import { createPortal } from 'react-dom'\nimport { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { Dialog, DialogContent, DialogTitle } from '@mui/material'\nimport ReactJson from 'flowise-react-json-view'\n\nconst SourceDocDialog = ({ show, dialogProps, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const customization = useSelector((state) => state.customization)\n\n    const [data, setData] = useState({})\n\n    useEffect(() => {\n        if (dialogProps.data) setData(dialogProps.data)\n\n        return () => {\n            setData({})\n        }\n    }, [dialogProps])\n\n    const component = show ? (\n        <Dialog\n            onClose={onCancel}\n            open={show}\n            fullWidth\n            maxWidth='sm'\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                Source Document\n            </DialogTitle>\n            <DialogContent>\n                <ReactJson\n                    theme={customization.isDarkMode ? 'ocean' : 'rjv-default'}\n                    style={{ padding: 10, borderRadius: 10 }}\n                    src={data}\n                    name={null}\n                    quotesOnKeys={false}\n                    enableClipboard={false}\n                    displayDataTypes={false}\n                />\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nSourceDocDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func\n}\n\nexport default SourceDocDialog\n","import client from './client'\n\nconst getChatmessageFromChatflow = (id) => client.get(`/chatmessage/${id}`)\n\nconst createNewChatmessage = (id, body) => client.post(`/chatmessage/${id}`, body)\n\nconst deleteChatmessage = (id) => client.delete(`/chatmessage/${id}`)\n\nexport default {\n    getChatmessageFromChatflow,\n    createNewChatmessage,\n    deleteChatmessage\n}\n","import client from './client'\n\nconst sendMessageAndGetPrediction = (id, input) => client.post(`/internal-prediction/${id}`, input)\n\nexport default {\n    sendMessageAndGetPrediction\n}\n","import { useState, useRef, useEffect, useCallback } from 'react'\nimport { useSelector } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport socketIOClient from 'socket.io-client'\nimport { cloneDeep } from 'lodash'\nimport rehypeMathjax from 'rehype-mathjax'\nimport remarkGfm from 'remark-gfm'\nimport remarkMath from 'remark-math'\n\nimport { CircularProgress, OutlinedInput, Divider, InputAdornment, IconButton, Box, Chip } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport { IconSend } from '@tabler/icons'\n\n// project import\nimport { CodeBlock } from 'ui-component/markdown/CodeBlock'\nimport { MemoizedReactMarkdown } from 'ui-component/markdown/MemoizedReactMarkdown'\nimport SourceDocDialog from 'ui-component/dialog/SourceDocDialog'\nimport './ChatMessage.css'\n\n// api\nimport chatmessageApi from 'api/chatmessage'\nimport chatflowsApi from 'api/chatflows'\nimport predictionApi from 'api/prediction'\n\n// Hooks\nimport useApi from 'hooks/useApi'\n\n// Const\nimport { baseURL, maxScroll } from 'store/constant'\n\nexport const ChatMessage = ({ open, chatflowid, isDialog }) => {\n    const theme = useTheme()\n    const customization = useSelector((state) => state.customization)\n\n    const ps = useRef()\n\n    const [userInput, setUserInput] = useState('')\n    const [loading, setLoading] = useState(false)\n    const [messages, setMessages] = useState([\n        {\n            message: 'Hi there! How can I help?',\n            type: 'apiMessage'\n        }\n    ])\n    const [socketIOClientId, setSocketIOClientId] = useState('')\n    const [isChatFlowAvailableToStream, setIsChatFlowAvailableToStream] = useState(false)\n    const [sourceDialogOpen, setSourceDialogOpen] = useState(false)\n    const [sourceDialogProps, setSourceDialogProps] = useState({})\n\n    const inputRef = useRef(null)\n    const getChatmessageApi = useApi(chatmessageApi.getChatmessageFromChatflow)\n    const getIsChatflowStreamingApi = useApi(chatflowsApi.getIsChatflowStreaming)\n\n    const onSourceDialogClick = (data) => {\n        setSourceDialogProps({ data })\n        setSourceDialogOpen(true)\n    }\n\n    const scrollToBottom = () => {\n        if (ps.current) {\n            ps.current.scrollTo({ top: maxScroll })\n        }\n    }\n\n    const onChange = useCallback((e) => setUserInput(e.target.value), [setUserInput])\n\n    const addChatMessage = async (message, type, sourceDocuments) => {\n        try {\n            const newChatMessageBody = {\n                role: type,\n                content: message,\n                chatflowid: chatflowid\n            }\n            if (sourceDocuments) newChatMessageBody.sourceDocuments = JSON.stringify(sourceDocuments)\n            await chatmessageApi.createNewChatmessage(chatflowid, newChatMessageBody)\n        } catch (error) {\n            console.error(error)\n        }\n    }\n\n    const updateLastMessage = (text) => {\n        setMessages((prevMessages) => {\n            let allMessages = [...cloneDeep(prevMessages)]\n            if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages\n            allMessages[allMessages.length - 1].message += text\n            return allMessages\n        })\n    }\n\n    const updateLastMessageSourceDocuments = (sourceDocuments) => {\n        setMessages((prevMessages) => {\n            let allMessages = [...cloneDeep(prevMessages)]\n            if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages\n            allMessages[allMessages.length - 1].sourceDocuments = sourceDocuments\n            return allMessages\n        })\n    }\n\n    // Handle errors\n    const handleError = (message = 'Oops! There seems to be an error. Please try again.') => {\n        message = message.replace(`Unable to parse JSON response from chat agent.\\n\\n`, '')\n        setMessages((prevMessages) => [...prevMessages, { message, type: 'apiMessage' }])\n        addChatMessage(message, 'apiMessage')\n        setLoading(false)\n        setUserInput('')\n        setTimeout(() => {\n            inputRef.current?.focus()\n        }, 100)\n    }\n\n    // Handle form submission\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n\n        if (userInput.trim() === '') {\n            return\n        }\n\n        setLoading(true)\n        setMessages((prevMessages) => [...prevMessages, { message: userInput, type: 'userMessage' }])\n        // waiting for first chatmessage saved, the first chatmessage will be used in sendMessageAndGetPrediction\n        await addChatMessage(userInput, 'userMessage')\n\n        // Send user question and history to API\n        try {\n            const params = {\n                question: userInput,\n                history: messages.filter((msg) => msg.message !== 'Hi there! How can I help?')\n            }\n            if (isChatFlowAvailableToStream) params.socketIOClientId = socketIOClientId\n\n            const response = await predictionApi.sendMessageAndGetPrediction(chatflowid, params)\n\n            if (response.data) {\n                const data = response.data\n                if (typeof data === 'object' && data.text && data.sourceDocuments) {\n                    if (!isChatFlowAvailableToStream) {\n                        setMessages((prevMessages) => [\n                            ...prevMessages,\n                            { message: data.text, sourceDocuments: data.sourceDocuments, type: 'apiMessage' }\n                        ])\n                    }\n                    addChatMessage(data.text, 'apiMessage', data.sourceDocuments)\n                } else {\n                    if (!isChatFlowAvailableToStream) {\n                        setMessages((prevMessages) => [...prevMessages, { message: data, type: 'apiMessage' }])\n                    }\n                    addChatMessage(data, 'apiMessage')\n                }\n                setLoading(false)\n                setUserInput('')\n                setTimeout(() => {\n                    inputRef.current?.focus()\n                    scrollToBottom()\n                }, 100)\n            }\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            handleError(errorData)\n            return\n        }\n    }\n\n    // Prevent blank submissions and allow for multiline input\n    const handleEnter = (e) => {\n        // Check if IME composition is in progress\n        const isIMEComposition = e.isComposing || e.keyCode === 229\n        if (e.key === 'Enter' && userInput && !isIMEComposition) {\n            if (!e.shiftKey && userInput) {\n                handleSubmit(e)\n            }\n        } else if (e.key === 'Enter') {\n            e.preventDefault()\n        }\n    }\n\n    // Get chatmessages successful\n    useEffect(() => {\n        if (getChatmessageApi.data) {\n            const loadedMessages = []\n            for (const message of getChatmessageApi.data) {\n                const obj = {\n                    message: message.content,\n                    type: message.role\n                }\n                if (message.sourceDocuments) obj.sourceDocuments = JSON.parse(message.sourceDocuments)\n                loadedMessages.push(obj)\n            }\n            setMessages((prevMessages) => [...prevMessages, ...loadedMessages])\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getChatmessageApi.data])\n\n    // Get chatflow streaming capability\n    useEffect(() => {\n        if (getIsChatflowStreamingApi.data) {\n            setIsChatFlowAvailableToStream(getIsChatflowStreamingApi.data?.isStreaming ?? false)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getIsChatflowStreamingApi.data])\n\n    // Auto scroll chat to bottom\n    useEffect(() => {\n        scrollToBottom()\n    }, [messages])\n\n    useEffect(() => {\n        if (isDialog && inputRef) {\n            setTimeout(() => {\n                inputRef.current?.focus()\n            }, 100)\n        }\n    }, [isDialog, inputRef])\n\n    useEffect(() => {\n        let socket\n        if (open && chatflowid) {\n            getChatmessageApi.request(chatflowid)\n            getIsChatflowStreamingApi.request(chatflowid)\n            scrollToBottom()\n\n            socket = socketIOClient(baseURL)\n\n            socket.on('connect', () => {\n                setSocketIOClientId(socket.id)\n            })\n\n            socket.on('start', () => {\n                setMessages((prevMessages) => [...prevMessages, { message: '', type: 'apiMessage' }])\n            })\n\n            socket.on('sourceDocuments', updateLastMessageSourceDocuments)\n\n            socket.on('token', updateLastMessage)\n        }\n\n        return () => {\n            setUserInput('')\n            setLoading(false)\n            setMessages([\n                {\n                    message: 'Hi there! How can I help?',\n                    type: 'apiMessage'\n                }\n            ])\n            if (socket) {\n                socket.disconnect()\n                setSocketIOClientId('')\n            }\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [open, chatflowid])\n\n    return (\n        <>\n            <div className={isDialog ? 'cloud-dialog' : 'cloud'}>\n                <div ref={ps} className='messagelist'>\n                    {messages &&\n                        messages.map((message, index) => {\n                            return (\n                                // The latest message sent by the user will be animated while waiting for a response\n                                <>\n                                    <Box\n                                        sx={{\n                                            background: message.type === 'apiMessage' ? theme.palette.asyncSelect.main : ''\n                                        }}\n                                        key={index}\n                                        style={{ display: 'flex' }}\n                                        className={\n                                            message.type === 'userMessage' && loading && index === messages.length - 1\n                                                ? customization.isDarkMode\n                                                    ? 'usermessagewaiting-dark'\n                                                    : 'usermessagewaiting-light'\n                                                : message.type === 'usermessagewaiting'\n                                                ? 'apimessage'\n                                                : 'usermessage'\n                                        }\n                                    >\n                                        {/* Display the correct icon depending on the message type */}\n                                        {message.type === 'apiMessage' ? (\n                                            <img\n                                                src='https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png'\n                                                alt='AI'\n                                                width='30'\n                                                height='30'\n                                                className='boticon'\n                                            />\n                                        ) : (\n                                            <img\n                                                src='https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png'\n                                                alt='Me'\n                                                width='30'\n                                                height='30'\n                                                className='usericon'\n                                            />\n                                        )}\n                                        <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\n                                            <div className='markdownanswer'>\n                                                {/* Messages are being rendered in Markdown format */}\n                                                <MemoizedReactMarkdown\n                                                    remarkPlugins={[remarkGfm, remarkMath]}\n                                                    rehypePlugins={[rehypeMathjax]}\n                                                    components={{\n                                                        code({ inline, className, children, ...props }) {\n                                                            const match = /language-(\\w+)/.exec(className || '')\n                                                            return !inline ? (\n                                                                <CodeBlock\n                                                                    key={Math.random()}\n                                                                    chatflowid={chatflowid}\n                                                                    isDialog={isDialog}\n                                                                    language={(match && match[1]) || ''}\n                                                                    value={String(children).replace(/\\n$/, '')}\n                                                                    {...props}\n                                                                />\n                                                            ) : (\n                                                                <code className={className} {...props}>\n                                                                    {children}\n                                                                </code>\n                                                            )\n                                                        }\n                                                    }}\n                                                >\n                                                    {message.message}\n                                                </MemoizedReactMarkdown>\n                                            </div>\n                                            {message.sourceDocuments && (\n                                                <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\n                                                    {message.sourceDocuments.map((source, index) => {\n                                                        return (\n                                                            <Chip\n                                                                size='small'\n                                                                key={index}\n                                                                label={`${source.pageContent.substring(0, 15)}...`}\n                                                                component='a'\n                                                                sx={{ mr: 1, mb: 1 }}\n                                                                variant='outlined'\n                                                                clickable\n                                                                onClick={() => onSourceDialogClick(source)}\n                                                            />\n                                                        )\n                                                    })}\n                                                </div>\n                                            )}\n                                        </div>\n                                    </Box>\n                                </>\n                            )\n                        })}\n                </div>\n            </div>\n            <Divider />\n            <div className='center'>\n                <div style={{ width: '100%' }}>\n                    <form style={{ width: '100%' }} onSubmit={handleSubmit}>\n                        <OutlinedInput\n                            inputRef={inputRef}\n                            // eslint-disable-next-line\n                            autoFocus\n                            sx={{ width: '100%' }}\n                            disabled={loading || !chatflowid}\n                            onKeyDown={handleEnter}\n                            id='userInput'\n                            name='userInput'\n                            placeholder={loading ? 'Waiting for response...' : 'Type your question...'}\n                            value={userInput}\n                            onChange={onChange}\n                            multiline={true}\n                            maxRows={isDialog ? 7 : 2}\n                            endAdornment={\n                                <InputAdornment position='end' sx={{ padding: '15px' }}>\n                                    <IconButton type='submit' disabled={loading || !chatflowid} edge='end'>\n                                        {loading ? (\n                                            <div>\n                                                <CircularProgress color='inherit' size={20} />\n                                            </div>\n                                        ) : (\n                                            // Send icon SVG in input field\n                                            <IconSend\n                                                color={loading || !chatflowid ? '#9e9e9e' : customization.isDarkMode ? 'white' : '#1e88e5'}\n                                            />\n                                        )}\n                                    </IconButton>\n                                </InputAdornment>\n                            }\n                        />\n                    </form>\n                </div>\n            </div>\n            <SourceDocDialog show={sourceDialogOpen} dialogProps={sourceDialogProps} onCancel={() => setSourceDialogOpen(false)} />\n        </>\n    )\n}\n\nChatMessage.propTypes = {\n    open: PropTypes.bool,\n    chatflowid: PropTypes.string,\n    isDialog: PropTypes.bool\n}\n","import { createPortal } from 'react-dom'\nimport PropTypes from 'prop-types'\nimport { useSelector } from 'react-redux'\n\nimport { Dialog, DialogContent, DialogTitle, Button } from '@mui/material'\nimport { ChatMessage } from './ChatMessage'\nimport { StyledButton } from 'ui-component/button/StyledButton'\nimport { IconEraser } from '@tabler/icons'\n\nconst ChatExpandDialog = ({ show, dialogProps, onClear, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const customization = useSelector((state) => state.customization)\n\n    const component = show ? (\n        <Dialog\n            open={show}\n            fullWidth\n            maxWidth='md'\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n            sx={{ overflow: 'visible' }}\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    {dialogProps.title}\n                    <div style={{ flex: 1 }}></div>\n                    {customization.isDarkMode && (\n                        <StyledButton\n                            variant='outlined'\n                            color='error'\n                            title='Clear Conversation'\n                            onClick={onClear}\n                            startIcon={<IconEraser />}\n                        >\n                            Clear Chat\n                        </StyledButton>\n                    )}\n                    {!customization.isDarkMode && (\n                        <Button variant='outlined' color='error' title='Clear Conversation' onClick={onClear} startIcon={<IconEraser />}>\n                            Clear Chat\n                        </Button>\n                    )}\n                </div>\n            </DialogTitle>\n            <DialogContent sx={{ display: 'flex', justifyContent: 'flex-end', flexDirection: 'column' }}>\n                <ChatMessage isDialog={true} open={dialogProps.open} chatflowid={dialogProps.chatflowid} />\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nChatExpandDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onClear: PropTypes.func,\n    onCancel: PropTypes.func\n}\n\nexport default ChatExpandDialog\n","import { useState, useRef, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport { ClickAwayListener, Paper, Popper, Button } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport { IconMessage, IconX, IconEraser, IconArrowsMaximize } from '@tabler/icons'\n\n// project import\nimport { StyledFab } from 'ui-component/button/StyledFab'\nimport MainCard from 'ui-component/cards/MainCard'\nimport Transitions from 'ui-component/extended/Transitions'\nimport { ChatMessage } from './ChatMessage'\nimport ChatExpandDialog from './ChatExpandDialog'\n\n// api\nimport chatmessageApi from 'api/chatmessage'\n\n// Hooks\nimport useConfirm from 'hooks/useConfirm'\nimport useNotifier from 'utils/useNotifier'\n\n// Const\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\n\nexport const ChatPopUp = ({ chatflowid }) => {\n    const theme = useTheme()\n    const { confirm } = useConfirm()\n    const dispatch = useDispatch()\n\n    useNotifier()\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [open, setOpen] = useState(false)\n    const [showExpandDialog, setShowExpandDialog] = useState(false)\n    const [expandDialogProps, setExpandDialogProps] = useState({})\n\n    const anchorRef = useRef(null)\n    const prevOpen = useRef(open)\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return\n        }\n        setOpen(false)\n    }\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen)\n    }\n\n    const expandChat = () => {\n        const props = {\n            open: true,\n            chatflowid: chatflowid\n        }\n        setExpandDialogProps(props)\n        setShowExpandDialog(true)\n    }\n\n    const resetChatDialog = () => {\n        const props = {\n            ...expandDialogProps,\n            open: false\n        }\n        setExpandDialogProps(props)\n        setTimeout(() => {\n            const resetProps = {\n                ...expandDialogProps,\n                open: true\n            }\n            setExpandDialogProps(resetProps)\n        }, 500)\n    }\n\n    const clearChat = async () => {\n        const confirmPayload = {\n            title: `Clear Chat History`,\n            description: `Are you sure you want to clear all chat history?`,\n            confirmButtonName: 'Clear',\n            cancelButtonName: 'Cancel'\n        }\n        const isConfirmed = await confirm(confirmPayload)\n\n        if (isConfirmed) {\n            try {\n                await chatmessageApi.deleteChatmessage(chatflowid)\n                resetChatDialog()\n                enqueueSnackbar({\n                    message: 'Succesfully cleared all chat history',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n            } catch (error) {\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n                enqueueSnackbar({\n                    message: errorData,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'error',\n                        persist: true,\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (prevOpen.current === true && open === false) {\n            anchorRef.current.focus()\n        }\n        prevOpen.current = open\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [open, chatflowid])\n\n    return (\n        <>\n            <StyledFab\n                sx={{ position: 'absolute', right: 20, top: 20 }}\n                ref={anchorRef}\n                size='small'\n                color='secondary'\n                aria-label='chat'\n                title='Chat'\n                onClick={handleToggle}\n            >\n                {open ? <IconX /> : <IconMessage />}\n            </StyledFab>\n            {open && (\n                <StyledFab\n                    sx={{ position: 'absolute', right: 80, top: 20 }}\n                    onClick={clearChat}\n                    size='small'\n                    color='error'\n                    aria-label='clear'\n                    title='Clear Chat History'\n                >\n                    <IconEraser />\n                </StyledFab>\n            )}\n            {open && (\n                <StyledFab\n                    sx={{ position: 'absolute', right: 140, top: 20 }}\n                    onClick={expandChat}\n                    size='small'\n                    color='primary'\n                    aria-label='expand'\n                    title='Expand Chat'\n                >\n                    <IconArrowsMaximize />\n                </StyledFab>\n            )}\n            <Popper\n                placement='bottom-end'\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n                popperOptions={{\n                    modifiers: [\n                        {\n                            name: 'offset',\n                            options: {\n                                offset: [40, 14]\n                            }\n                        }\n                    ]\n                }}\n                sx={{ zIndex: 1000 }}\n            >\n                {({ TransitionProps }) => (\n                    <Transitions in={open} {...TransitionProps}>\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\n                                    <ChatMessage chatflowid={chatflowid} open={open} />\n                                </MainCard>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Transitions>\n                )}\n            </Popper>\n            <ChatExpandDialog\n                show={showExpandDialog}\n                dialogProps={expandDialogProps}\n                onClear={clearChat}\n                onCancel={() => setShowExpandDialog(false)}\n            ></ChatExpandDialog>\n        </>\n    )\n}\n\nChatPopUp.propTypes = { chatflowid: PropTypes.string }\n","import client from './client'\n\nconst getAllNodes = () => client.get('/nodes')\n\nconst getSpecificNode = (name) => client.get(`/nodes/${name}`)\n\nexport default {\n    getAllNodes,\n    getSpecificNode\n}\n","import { useEffect, useRef, useState, useCallback, useContext } from 'react'\nimport ReactFlow, { addEdge, Controls, Background, useNodesState, useEdgesState } from 'reactflow'\nimport 'reactflow/dist/style.css'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { usePrompt } from '../../utils/usePrompt'\nimport {\n    REMOVE_DIRTY,\n    SET_DIRTY,\n    SET_CHATFLOW,\n    enqueueSnackbar as enqueueSnackbarAction,\n    closeSnackbar as closeSnackbarAction\n} from 'store/actions'\n\n// material-ui\nimport { Toolbar, Box, AppBar, Button } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\n// project imports\nimport CanvasNode from './CanvasNode'\nimport ButtonEdge from './ButtonEdge'\nimport CanvasHeader from './CanvasHeader'\nimport AddNodes from './AddNodes'\nimport ConfirmDialog from 'ui-component/dialog/ConfirmDialog'\nimport { ChatPopUp } from 'views/chatmessage/ChatPopUp'\nimport { flowContext } from 'store/context/ReactFlowContext'\n\n// API\nimport nodesApi from 'api/nodes'\nimport chatflowsApi from 'api/chatflows'\n\n// Hooks\nimport useApi from 'hooks/useApi'\nimport useConfirm from 'hooks/useConfirm'\n\n// icons\nimport { IconX } from '@tabler/icons'\n\n// utils\nimport { getUniqueNodeId, initNode, getEdgeLabelName, rearrangeToolsOrdering } from 'utils/genericHelper'\nimport useNotifier from 'utils/useNotifier'\n\nconst nodeTypes = { customNode: CanvasNode }\nconst edgeTypes = { buttonedge: ButtonEdge }\n\n// ==============================|| CANVAS ||============================== //\n\nconst Canvas = () => {\n    const theme = useTheme()\n    const navigate = useNavigate()\n\n    const { state } = useLocation()\n    const templateFlowData = state ? state.templateFlowData : ''\n\n    const URLpath = document.location.pathname.toString().split('/')\n    const chatflowId = URLpath[URLpath.length - 1] === 'canvas' ? '' : URLpath[URLpath.length - 1]\n\n    const { confirm } = useConfirm()\n\n    const dispatch = useDispatch()\n    const canvas = useSelector((state) => state.canvas)\n    const [canvasDataStore, setCanvasDataStore] = useState(canvas)\n    const [chatflow, setChatflow] = useState(null)\n\n    const { reactFlowInstance, setReactFlowInstance } = useContext(flowContext)\n\n    // ==============================|| Snackbar ||============================== //\n\n    useNotifier()\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    // ==============================|| ReactFlow ||============================== //\n\n    const [nodes, setNodes, onNodesChange] = useNodesState()\n    const [edges, setEdges, onEdgesChange] = useEdgesState()\n\n    const [selectedNode, setSelectedNode] = useState(null)\n\n    const reactFlowWrapper = useRef(null)\n\n    // ==============================|| Chatflow API ||============================== //\n\n    const getNodesApi = useApi(nodesApi.getAllNodes)\n    const createNewChatflowApi = useApi(chatflowsApi.createNewChatflow)\n    const testChatflowApi = useApi(chatflowsApi.testChatflow)\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\n    const getSpecificChatflowApi = useApi(chatflowsApi.getSpecificChatflow)\n\n    // ==============================|| Events & Actions ||============================== //\n\n    const onConnect = (params) => {\n        const newEdge = {\n            ...params,\n            type: 'buttonedge',\n            id: `${params.source}-${params.sourceHandle}-${params.target}-${params.targetHandle}`,\n            data: { label: getEdgeLabelName(params.sourceHandle) }\n        }\n\n        const targetNodeId = params.targetHandle.split('-')[0]\n        const sourceNodeId = params.sourceHandle.split('-')[0]\n        const targetInput = params.targetHandle.split('-')[2]\n\n        setNodes((nds) =>\n            nds.map((node) => {\n                if (node.id === targetNodeId) {\n                    setTimeout(() => setDirty(), 0)\n                    let value\n                    const inputAnchor = node.data.inputAnchors.find((ancr) => ancr.name === targetInput)\n                    const inputParam = node.data.inputParams.find((param) => param.name === targetInput)\n\n                    if (inputAnchor && inputAnchor.list) {\n                        const newValues = node.data.inputs[targetInput] || []\n                        if (targetInput === 'tools') {\n                            rearrangeToolsOrdering(newValues, sourceNodeId)\n                        } else {\n                            newValues.push(`{{${sourceNodeId}.data.instance}}`)\n                        }\n                        value = newValues\n                    } else if (inputParam && inputParam.acceptVariable) {\n                        value = node.data.inputs[targetInput] || ''\n                    } else {\n                        value = `{{${sourceNodeId}.data.instance}}`\n                    }\n                    node.data = {\n                        ...node.data,\n                        inputs: {\n                            ...node.data.inputs,\n                            [targetInput]: value\n                        }\n                    }\n                }\n                return node\n            })\n        )\n\n        setEdges((eds) => addEdge(newEdge, eds))\n    }\n\n    const handleLoadFlow = (file) => {\n        try {\n            const flowData = JSON.parse(file)\n            const nodes = flowData.nodes || []\n\n            setNodes(nodes)\n            setEdges(flowData.edges || [])\n            setDirty()\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    const handleDeleteFlow = async () => {\n        const confirmPayload = {\n            title: `Delete`,\n            description: `Delete chatflow ${chatflow.name}?`,\n            confirmButtonName: 'Delete',\n            cancelButtonName: 'Cancel'\n        }\n        const isConfirmed = await confirm(confirmPayload)\n\n        if (isConfirmed) {\n            try {\n                await chatflowsApi.deleteChatflow(chatflow.id)\n                navigate(-1)\n            } catch (error) {\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n                enqueueSnackbar({\n                    message: errorData,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'error',\n                        persist: true,\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n            }\n        }\n    }\n\n    const handleSaveFlow = (chatflowName) => {\n        if (reactFlowInstance) {\n            setNodes((nds) =>\n                nds.map((node) => {\n                    node.data = {\n                        ...node.data,\n                        selected: false\n                    }\n                    return node\n                })\n            )\n\n            const rfInstanceObject = reactFlowInstance.toObject()\n            const flowData = JSON.stringify(rfInstanceObject)\n\n            if (!chatflow.id) {\n                const newChatflowBody = {\n                    name: chatflowName,\n                    deployed: false,\n                    isPublic: false,\n                    flowData\n                }\n                createNewChatflowApi.request(newChatflowBody)\n            } else {\n                const updateBody = {\n                    name: chatflowName,\n                    flowData\n                }\n                updateChatflowApi.request(chatflow.id, updateBody)\n            }\n        }\n    }\n\n    // eslint-disable-next-line\n    const onNodeClick = useCallback((event, clickedNode) => {\n        setSelectedNode(clickedNode)\n        setNodes((nds) =>\n            nds.map((node) => {\n                if (node.id === clickedNode.id) {\n                    node.data = {\n                        ...node.data,\n                        selected: true\n                    }\n                } else {\n                    node.data = {\n                        ...node.data,\n                        selected: false\n                    }\n                }\n\n                return node\n            })\n        )\n    })\n\n    const onDragOver = useCallback((event) => {\n        event.preventDefault()\n        event.dataTransfer.dropEffect = 'move'\n    }, [])\n\n    const onDrop = useCallback(\n        (event) => {\n            event.preventDefault()\n            const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect()\n            let nodeData = event.dataTransfer.getData('application/reactflow')\n\n            // check if the dropped element is valid\n            if (typeof nodeData === 'undefined' || !nodeData) {\n                return\n            }\n\n            nodeData = JSON.parse(nodeData)\n\n            const position = reactFlowInstance.project({\n                x: event.clientX - reactFlowBounds.left - 100,\n                y: event.clientY - reactFlowBounds.top - 50\n            })\n\n            const newNodeId = getUniqueNodeId(nodeData, reactFlowInstance.getNodes())\n\n            const newNode = {\n                id: newNodeId,\n                position,\n                type: 'customNode',\n                data: initNode(nodeData, newNodeId)\n            }\n\n            setSelectedNode(newNode)\n            setNodes((nds) =>\n                nds.concat(newNode).map((node) => {\n                    if (node.id === newNode.id) {\n                        node.data = {\n                            ...node.data,\n                            selected: true\n                        }\n                    } else {\n                        node.data = {\n                            ...node.data,\n                            selected: false\n                        }\n                    }\n\n                    return node\n                })\n            )\n            setTimeout(() => setDirty(), 0)\n        },\n\n        // eslint-disable-next-line\n        [reactFlowInstance]\n    )\n\n    const saveChatflowSuccess = () => {\n        dispatch({ type: REMOVE_DIRTY })\n        enqueueSnackbar({\n            message: 'Chatflow saved',\n            options: {\n                key: new Date().getTime() + Math.random(),\n                variant: 'success',\n                action: (key) => (\n                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                        <IconX />\n                    </Button>\n                )\n            }\n        })\n    }\n\n    const errorFailed = (message) => {\n        enqueueSnackbar({\n            message,\n            options: {\n                key: new Date().getTime() + Math.random(),\n                variant: 'error',\n                persist: true,\n                action: (key) => (\n                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                        <IconX />\n                    </Button>\n                )\n            }\n        })\n    }\n\n    const setDirty = () => {\n        dispatch({ type: SET_DIRTY })\n    }\n\n    // ==============================|| useEffect ||============================== //\n\n    // Get specific chatflow successful\n    useEffect(() => {\n        if (getSpecificChatflowApi.data) {\n            const chatflow = getSpecificChatflowApi.data\n            const initialFlow = chatflow.flowData ? JSON.parse(chatflow.flowData) : []\n            setNodes(initialFlow.nodes || [])\n            setEdges(initialFlow.edges || [])\n            dispatch({ type: SET_CHATFLOW, chatflow })\n        } else if (getSpecificChatflowApi.error) {\n            const error = getSpecificChatflowApi.error\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            errorFailed(`Failed to retrieve chatflow: ${errorData}`)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getSpecificChatflowApi.data, getSpecificChatflowApi.error])\n\n    // Create new chatflow successful\n    useEffect(() => {\n        if (createNewChatflowApi.data) {\n            const chatflow = createNewChatflowApi.data\n            dispatch({ type: SET_CHATFLOW, chatflow })\n            saveChatflowSuccess()\n            window.history.replaceState(null, null, `/canvas/${chatflow.id}`)\n        } else if (createNewChatflowApi.error) {\n            const error = createNewChatflowApi.error\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            errorFailed(`Failed to save chatflow: ${errorData}`)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [createNewChatflowApi.data, createNewChatflowApi.error])\n\n    // Update chatflow successful\n    useEffect(() => {\n        if (updateChatflowApi.data) {\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\n            saveChatflowSuccess()\n        } else if (updateChatflowApi.error) {\n            const error = updateChatflowApi.error\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            errorFailed(`Failed to save chatflow: ${errorData}`)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [updateChatflowApi.data, updateChatflowApi.error])\n\n    // Test chatflow failed\n    useEffect(() => {\n        if (testChatflowApi.error) {\n            enqueueSnackbar({\n                message: 'Test chatflow failed',\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [testChatflowApi.error])\n\n    useEffect(() => setChatflow(canvasDataStore.chatflow), [canvasDataStore.chatflow])\n\n    // Initialization\n    useEffect(() => {\n        if (chatflowId) {\n            getSpecificChatflowApi.request(chatflowId)\n        } else {\n            if (localStorage.getItem('duplicatedFlowData')) {\n                handleLoadFlow(localStorage.getItem('duplicatedFlowData'))\n                setTimeout(() => localStorage.removeItem('duplicatedFlowData'), 0)\n            } else {\n                setNodes([])\n                setEdges([])\n            }\n            dispatch({\n                type: SET_CHATFLOW,\n                chatflow: {\n                    name: 'Untitled chatflow'\n                }\n            })\n        }\n\n        getNodesApi.request()\n\n        // Clear dirty state before leaving and remove any ongoing test triggers and webhooks\n        return () => {\n            setTimeout(() => dispatch({ type: REMOVE_DIRTY }), 0)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        setCanvasDataStore(canvas)\n    }, [canvas])\n\n    useEffect(() => {\n        function handlePaste(e) {\n            const pasteData = e.clipboardData.getData('text')\n            //TODO: prevent paste event when input focused, temporary fix: catch chatflow syntax\n            if (pasteData.includes('{\"nodes\":[') && pasteData.includes('],\"edges\":[')) {\n                handleLoadFlow(pasteData)\n            }\n        }\n\n        window.addEventListener('paste', handlePaste)\n\n        return () => {\n            window.removeEventListener('paste', handlePaste)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        if (templateFlowData && templateFlowData.includes('\"nodes\":[') && templateFlowData.includes('],\"edges\":[')) {\n            handleLoadFlow(templateFlowData)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [templateFlowData])\n\n    usePrompt('You have unsaved changes! Do you want to navigate away?', canvasDataStore.isDirty)\n\n    return (\n        <>\n            <Box>\n                <AppBar\n                    enableColorOnDark\n                    position='fixed'\n                    color='inherit'\n                    elevation={1}\n                    sx={{\n                        bgcolor: theme.palette.background.default\n                    }}\n                >\n                    <Toolbar>\n                        <CanvasHeader\n                            chatflow={chatflow}\n                            handleSaveFlow={handleSaveFlow}\n                            handleDeleteFlow={handleDeleteFlow}\n                            handleLoadFlow={handleLoadFlow}\n                        />\n                    </Toolbar>\n                </AppBar>\n                <Box sx={{ pt: '70px', height: '100vh', width: '100%' }}>\n                    <div className='reactflow-parent-wrapper'>\n                        <div className='reactflow-wrapper' ref={reactFlowWrapper}>\n                            <ReactFlow\n                                nodes={nodes}\n                                edges={edges}\n                                onNodesChange={onNodesChange}\n                                onNodeClick={onNodeClick}\n                                onEdgesChange={onEdgesChange}\n                                onDrop={onDrop}\n                                onDragOver={onDragOver}\n                                onNodeDragStop={setDirty}\n                                nodeTypes={nodeTypes}\n                                edgeTypes={edgeTypes}\n                                onConnect={onConnect}\n                                onInit={setReactFlowInstance}\n                                fitView\n                                deleteKeyCode={canvas.canvasDialogShow ? null : ['Backspace', 'Delete']}\n                                minZoom={0.1}\n                            >\n                                <Controls\n                                    style={{\n                                        display: 'flex',\n                                        flexDirection: 'row',\n                                        left: '50%',\n                                        transform: 'translate(-50%, -50%)'\n                                    }}\n                                />\n                                <Background color='#aaa' gap={16} />\n                                <AddNodes nodesData={getNodesApi.data} node={selectedNode} />\n                                <ChatPopUp chatflowid={chatflowId} />\n                            </ReactFlow>\n                        </div>\n                    </div>\n                </Box>\n                <ConfirmDialog />\n            </Box>\n        </>\n    )\n}\n\nexport default Canvas\n"],"names":["getAllAPIKeys","client","get","createNewAPI","body","post","updateAPI","id","put","concat","deleteAPI","delete","getAllChatflows","getSpecificChatflow","getSpecificChatflowFromPublicEndpoint","createNewChatflow","updateChatflow","deleteChatflow","getIsChatflowStreaming","usePrompt","message","when","arguments","length","undefined","blocker","navigator","useContext","NavigationContext","useEffect","unblock","block","tx","autoUnblockingTx","_objectSpread","retry","useBlocker","useCallback","window","confirm","CardWrapper","styled","MainCard","_ref","theme","background","palette","card","main","color","darkTextPrimary","border","borderColor","primary","width","height","padding","boxShadow","_ref2","_theme$customization","_theme$colors","_theme$customization2","_theme$colors2","data","useTheme","_useContext","flowContext","deleteNode","duplicateNode","_useState","useState","_useState2","_slicedToArray","showDialog","setShowDialog","_useState3","_useState4","dialogProps","setDialogProps","_jsxs","_Fragment","children","_jsx","content","sx","selected","text","secondary","Box","style","display","flexDirection","alignItems","marginRight","typography","commonAvatar","largeAvatar","borderRadius","backgroundColor","cursor","objectFit","src","baseURL","name","alt","Typography","fontSize","fontWeight","label","flexGrow","IconButton","title","onClick","customization","isDarkMode","colors","paper","IconCopy","mr","IconTrash","inputAnchors","inputParams","Divider","asyncSelect","p","textAlign","map","inputAnchor","index","NodeInputHandler","inputParam","find","param","additionalParams","marginTop","filter","Button","mb","variant","confirmButtonName","cancelButtonName","outputAnchors","outputAnchor","NodeOutputHandler","AdditionalParamsDialog","show","onCancel","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","_ref$style","markerEnd","_getBezierPath","getBezierPath","_getBezierPath2","edgePath","edgeCenterX","edgeCenterY","deleteEdge","dispatch","useDispatch","className","d","EdgeText","x","y","labelStyle","fill","labelBgStyle","labelBgPadding","labelBgBorderRadius","foreignObjectSize","requiredExtensions","event","evt","stopPropagation","type","SET_DIRTY","onEdgeClick","icons","IconFileUpload","IconFileExport","url","icon","chatflow","isSettingsOpen","anchorEl","onSettingsItemClick","onUploadFile","onClose","settingsMenu","setSettingsMenu","open","setOpen","settings","menu","items","NavItem","item","level","navType","Popper","placement","role","transition","disablePortal","popperOptions","modifiers","options","offset","zIndex","TransitionProps","Transitions","in","Paper","ClickAwayListener","onClickAway","elevation","shadow","shadows","PerfectScrollbar","maxHeight","overflowX","List","onConfirm","portalElement","document","getElementById","chatflowName","setChatflowName","isReadyToSave","setIsReadyToSave","component","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","OutlinedInput","mt","placeholder","value","onChange","e","target","DialogActions","StyledButton","disabled","createPortal","defaultConfig","textColor","sendButtonColor","_chatflow$isPublic","_chatbotConfig$genera","_chatbotConfig$welcom","_chatbotConfig$backgr","_chatbotConfig$fontSi","_chatbotConfig$powere","_chatbotConfig$botMes","_chatbotConfig$botMes2","_chatbotConfig$botMes3","_chatbotConfig$botMes4","_chatbotConfig$botMes5","_chatbotConfig$botMes6","_chatbotConfig$botMes7","_chatbotConfig$botMes8","_chatbotConfig$userMe","_chatbotConfig$userMe2","_chatbotConfig$userMe3","_chatbotConfig$userMe4","_chatbotConfig$userMe5","_chatbotConfig$userMe6","_chatbotConfig$userMe7","_chatbotConfig$userMe8","_chatbotConfig$textIn","_chatbotConfig$textIn2","_chatbotConfig$textIn3","_chatbotConfig$textIn4","_chatbotConfig$textIn5","_chatbotConfig$textIn6","_chatbotConfig$textIn7","_chatbotConfig$textIn8","isSessionMemory","useSelector","state","canvas","chatflowid","chatbotConfig","JSON","parse","useNotifier","enqueueSnackbar","enqueueSnackbarAction","apply","closeSnackbar","closeSnackbarAction","isPublic","isPublicChatflow","setChatflowIsPublic","generateNewSession","setGenerateNewSession","_useState5","welcomeMessage","_useState6","setWelcomeMessage","_useState7","_useState8","setBackgroundColor","_useState9","_useState10","setFontSize","_useState11","poweredByTextColor","_useState12","setPoweredByTextColor","_useState13","botMessage","_useState14","botMessageBackgroundColor","setBotMessageBackgroundColor","_useState15","_useState16","botMessageTextColor","setBotMessageTextColor","_useState17","avatarSrc","_useState18","botMessageAvatarSrc","setBotMessageAvatarSrc","_useState19","showAvatar","_useState20","botMessageShowAvatar","setBotMessageShowAvatar","_useState21","userMessage","_useState22","userMessageBackgroundColor","setUserMessageBackgroundColor","_useState23","_useState24","userMessageTextColor","setUserMessageTextColor","_useState25","_useState26","userMessageAvatarSrc","setUserMessageAvatarSrc","_useState27","_useState28","userMessageShowAvatar","setUserMessageShowAvatar","_useState29","textInput","_useState30","textInputBackgroundColor","setTextInputBackgroundColor","_useState31","_useState32","textInputTextColor","setTextInputTextColor","_useState33","_useState34","textInputPlaceholder","setTextInputPlaceholder","_useState35","_useState36","textInputSendButtonColor","setTextInputSendButtonColor","_useState37","_useState38","colorAnchorEl","setColorAnchorEl","_useState39","_useState40","selectedColorConfig","setSelectedColorConfig","_useState41","_useState42","sketchPickerColor","setSketchPickerColor","openColorPopOver","Boolean","_useState43","_useState44","copyAnchorEl","setCopyAnchorEl","openCopyPopOver","formatObj","obj","overrideConfig","onSave","_asyncToGenerator","_regeneratorRuntime","mark","_callee","saveResp","errorData","wrap","_context","prev","next","chatflowsApi","stringify","sent","key","Date","getTime","Math","random","action","IconX","SET_CHATFLOW","t0","console","error","response","status","statusText","persist","stop","onSwitchChange","_ref3","_callee2","checked","_context2","_x","handleCloseCopyPopOver","colorField","fieldName","fieldLabel","pt","pb","currentTarget","booleanField","Switch","onBooleanChanged","textField","fieldType","onTextChanged","Stack","direction","light","clipboard","writeText","setTimeout","IconArrowUpRightCircle","flex","TooltipWithParser","marginLeft","marginBottom","Popover","anchorOrigin","vertical","horizontal","transformOrigin","SketchPicker","hexColor","onColorSelected","hex","pl","pr","success","dark","CheckboxInput","_ref$disabled","myValue","setMyValue","FormControlLabel","size","control","Checkbox","TabPanel","props","other","_objectWithoutProperties","_excluded","hidden","buttonConfig","chatwindowConfig","codes","setValue","embedChatCheckboxVal","setEmbedChatCheckbox","onCheckBoxEmbedChatChanged","newVal","getCode","codeLang","embedPopupHtmlCode","embedFullpageHtmlCode","embedPopupReactCode","embedFullpageReactCode","getCodeCustomization","embedPopupHtmlCodeCustomization","embedFullpageHtmlCodeCustomization","embedPopupReactCodeCustomization","embedFullpageReactCodeCustomization","Tabs","newValue","Tab","a11yProps","rel","href","CopyBlock","atomOneDark","language","showLineNumbers","wrapLines","TableViewOnly","columns","rows","TableContainer","Table","minWidth","TableHead","TableRow","col","TableCell","charAt","toUpperCase","slice","TableBody","row","Object","keys","unshiftFiles","configData","filesConfig","config","unshift","getConfigExamplesForJS","bodyType","finalStr","loop","min","i","exampleVal","getConfigExamplesForPython","getConfigExamplesForCurl","_dialogProps$chatflow","navigate","useNavigate","keyOptions","setKeyOptions","apiKeys","setAPIKeys","chatflowApiKeyId","setChatflowApiKeyId","selectedApiKey","setSelectedApiKey","checkboxVal","setCheckbox","getAllAPIKeysApi","useApi","apiKeyApi","updateChatflowApi","getIsChatflowStreamingApi","getConfigApi","configApi","onCheckBoxChanged","request","getCodeWithAuthorization","apiKey","getLang","getSVG","pythonSVG","javascriptSVG","EmbedSVG","cURLSVG","ShareChatbotSVG","getConfigCodeWithFormData","getConfigCodeWithFormDataWithAuth","getConfigCode","getConfigCodeWithAuthorization","_step","_iterator","_createForOfIteratorHelper","s","n","done","push","keyName","err","f","iconPosition","Dropdown","disableClearable","onSelect","keyValue","updateBody","apikeyid","onApiKeySelected","_getIsChatflowStreami","EmbedChat","isFormDataRequired","isStreaming","ShareChatbot","handleSaveFlow","handleDeleteFlow","handleLoadFlow","flowNameRef","useRef","settingsRef","isEditingFlowName","setEditingFlowName","flowName","setFlowName","setSettingsOpen","flowDialogOpen","setFlowDialogOpen","apiDialogOpen","setAPIDialogOpen","apiDialogProps","setAPIDialogProps","ButtonBase","Avatar","mediumAvatar","history","idx","replace","IconChevronLeft","stroke","ml","isDirty","orange","IconPencil","TextField","inputRef","defaultValue","current","IconCheck","canvasHeader","deployLight","deployDark","nodes","flowData","_step2","_iterator2","IconCode","saveLight","saveDark","IconDeviceFloppy","ref","settingsLight","settingsDark","IconSettings","Settings","setting","localStorage","setItem","uiBaseURL","dataStr","generateExportFlowData","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","createElement","setAttribute","click","file","SaveChatflowDialog","APICodeDialog","StyledFab","Fab","_ref$color","backgroundImage","nodesData","node","searchValue","setSearchValue","setNodes","categoryExpanded","setCategoryExpanded","anchorRef","prevOpen","ps","scrollTop","curr","filterSearch","returnData","nd","passesQuery","toLowerCase","includes","passesCategory","category","getSearchedNodes","groupByCategory","isFilter","accordianCategories","result","reduce","r","a","create","handleAccordionChange","isExpanded","handleClose","contains","focus","left","top","IconMinus","IconPlus","my","startAdornment","InputAdornment","position","IconSearch","grey","endAdornment","inputProps","containerRef","el","py","_defineProperty","breakpoints","down","sort","Accordion","expanded","disableGutters","AccordionSummary","expandIcon","ExpandMoreIcon","AccordionDetails","onDragStart","dataTransfer","setData","effectAllowed","draggable","ListItemButton","ListItem","ListItemAvatar","ListItemText","description","programmingLanguages","javascript","python","java","c","cpp","ruby","php","swift","kotlin","typescript","go","perl","rust","scala","haskell","lua","shell","sql","html","css","CodeBlock","memo","_theme$palette","isDialog","setAnchorEl","openPopOver","handleClosePopOver","common","borderTopLeftRadius","borderTopRightRadius","IconClipboard","fileExtension","fileName","blob","Blob","URL","createObjectURL","link","download","appendChild","removeChild","revokeObjectURL","IconDownload","SyntaxHighlighter","oneDark","customStyle","margin","displayName","MemoizedReactMarkdown","ReactMarkdown","prevProps","nextProps","ReactJson","quotesOnKeys","enableClipboard","displayDataTypes","input","ChatMessage","userInput","setUserInput","loading","setLoading","messages","setMessages","socketIOClientId","setSocketIOClientId","isChatFlowAvailableToStream","setIsChatFlowAvailableToStream","sourceDialogOpen","setSourceDialogOpen","sourceDialogProps","setSourceDialogProps","getChatmessageApi","chatmessageApi","scrollToBottom","scrollTo","maxScroll","addChatMessage","sourceDocuments","newChatMessageBody","_x2","_x3","updateLastMessage","prevMessages","allMessages","_toConsumableArray","cloneDeep","updateLastMessageSourceDocuments","handleError","_inputRef$current","handleSubmit","params","preventDefault","trim","abrupt","question","msg","predictionApi","_inputRef$current2","_x4","loadedMessages","_getIsChatflowStreami2","_inputRef$current3","socket","socketIOClient","on","disconnect","remarkPlugins","remarkGfm","remarkMath","rehypePlugins","rehypeMathjax","components","code","_ref4","inline","match","exec","String","source","Chip","pageContent","substring","clickable","onSubmit","autoFocus","onKeyDown","isIMEComposition","isComposing","keyCode","shiftKey","multiline","maxRows","edge","CircularProgress","IconSend","SourceDocDialog","onClear","overflow","startIcon","IconEraser","justifyContent","ChatPopUp","useConfirm","showExpandDialog","setShowExpandDialog","expandDialogProps","setExpandDialogProps","resetChatDialog","resetProps","clearChat","confirmPayload","right","IconMessage","IconArrowsMaximize","ChatExpandDialog","nodeTypes","customNode","CanvasNode","edgeTypes","buttonedge","ButtonEdge","useLocation","templateFlowData","URLpath","location","pathname","toString","split","chatflowId","canvasDataStore","setCanvasDataStore","setChatflow","reactFlowInstance","setReactFlowInstance","_useNodesState","useNodesState","_useNodesState2","onNodesChange","_useEdgesState","useEdgesState","_useEdgesState2","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","reactFlowWrapper","getNodesApi","nodesApi","createNewChatflowApi","testChatflowApi","testChatflow","getSpecificChatflowApi","setDirty","onNodeClick","clickedNode","nds","onDragOver","dropEffect","onDrop","reactFlowBounds","getBoundingClientRect","nodeData","getData","project","clientX","clientY","newNodeId","getUniqueNodeId","getNodes","newNode","initNode","saveChatflowSuccess","REMOVE_DIRTY","errorFailed","initialFlow","replaceState","getItem","removeItem","handlePaste","pasteData","clipboardData","addEventListener","removeEventListener","AppBar","enableColorOnDark","bgcolor","default","Toolbar","CanvasHeader","rfInstanceObject","toObject","newChatflowBody","deployed","ReactFlow","onNodeDragStop","onConnect","newEdge","sourceHandle","targetHandle","getEdgeLabelName","targetNodeId","sourceNodeId","targetInput","ancr","list","newValues","inputs","rearrangeToolsOrdering","acceptVariable","eds","addEdge","onInit","fitView","deleteKeyCode","canvasDialogShow","minZoom","Controls","transform","Background","gap","AddNodes","ConfirmDialog"],"sourceRoot":""}