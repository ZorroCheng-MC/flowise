{"ast":null,"code":"import _toConsumableArray from \"/Users/zorro/Downloads/Flowise/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/zorro/Downloads/Flowise/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Uses binary search to avoid looping through all possible positions\nexport function binarySearch(offset, positions) {\n  var sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  var pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  var itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  var interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport var getRenderableIndexes = function getRenderableIndexes(_ref3) {\n  var firstIndex = _ref3.firstIndex,\n    lastIndex = _ref3.lastIndex,\n    buffer = _ref3.buffer,\n    minFirstIndex = _ref3.minFirstIndex,\n    maxLastIndex = _ref3.maxLastIndex;\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport var areRenderContextsEqual = function areRenderContextsEqual(context1, context2) {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n// The `maxSize` is 3 so that reselect caches the `renderedColumns` values for the pinned left,\n// unpinned, and pinned right sections.\nvar MEMOIZE_OPTIONS = {\n  maxSize: 3\n};\nexport var useGridVirtualScroller = function useGridVirtualScroller(props) {\n  var _currentPage$range3, _currentPage$range4;\n  var apiRef = useGridPrivateApiContext();\n  var rootProps = useGridRootProps();\n  var visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  var ref = props.ref,\n    disableVirtualization = props.disableVirtualization,\n    onRenderZonePositioning = props.onRenderZonePositioning,\n    _props$renderZoneMinC = props.renderZoneMinColumnIndex,\n    renderZoneMinColumnIndex = _props$renderZoneMinC === void 0 ? 0 : _props$renderZoneMinC,\n    _props$renderZoneMaxC = props.renderZoneMaxColumnIndex,\n    renderZoneMaxColumnIndex = _props$renderZoneMaxC === void 0 ? visibleColumns.length : _props$renderZoneMaxC,\n    getRowProps = props.getRowProps;\n  var theme = useTheme();\n  var columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  var columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  var cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  var cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  var rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  var selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  var currentPage = useGridVisibleRows(apiRef, rootProps);\n  var renderZoneRef = React.useRef(null);\n  var rootRef = React.useRef(null);\n  var handleRef = useForkRef(ref, rootRef);\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    renderContext = _React$useState2[0],\n    setRenderContext = _React$useState2[1];\n  var prevRenderContext = React.useRef(renderContext);\n  var scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  var _React$useState3 = React.useState({\n      width: null,\n      height: null\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    containerDimensions = _React$useState4[0],\n    setContainerDimensions = _React$useState4[1];\n  var prevTotalWidth = React.useRef(columnsTotalWidth);\n  var rowStyleCache = React.useRef(Object.create(null));\n  var prevGetRowProps = React.useRef();\n  var prevRootRowStyle = React.useRef();\n  var getRenderedColumnsRef = React.useRef(defaultMemoize(function (columns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, indexOfColumnWithFocusedCell) {\n    // If the selected column is not within the current range of columns being displayed,\n    // we need to render it at either the left or right of the columns,\n    // depending on whether it is above or below the range.\n    var focusedCellColumnIndexNotInRange;\n    var renderedColumns = columns.slice(firstColumnToRender, lastColumnToRender);\n    if (indexOfColumnWithFocusedCell > -1) {\n      // check if it is not on the left pinned column.\n      if (firstColumnToRender > indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell >= minFirstColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n      // check if it is not on the right pinned column.\n      else if (lastColumnToRender < indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell < maxLastColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n    }\n    return {\n      focusedCellColumnIndexNotInRange: focusedCellColumnIndexNotInRange,\n      renderedColumns: renderedColumns\n    };\n  }, MEMOIZE_OPTIONS));\n  var indexOfColumnWithFocusedCell = React.useMemo(function () {\n    if (cellFocus !== null) {\n      return visibleColumns.findIndex(function (column) {\n        return column.field === cellFocus.field;\n      });\n    }\n    return -1;\n  }, [cellFocus, visibleColumns]);\n  var getNearestIndexToRender = React.useCallback(function (offset) {\n    var _currentPage$range, _currentPage$range2;\n    var lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    var allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    var lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    }\n\n    // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  var computeRenderContext = React.useCallback(function () {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    var _scrollPosition$curre = scrollPosition.current,\n      top = _scrollPosition$curre.top,\n      left = _scrollPosition$curre.left;\n\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    var firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    var lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    var hasRowWithAutoHeight = false;\n    var firstColumnIndex = 0;\n    var lastColumnIndex = columnPositions.length;\n    var _getRenderableIndexes = getRenderableIndexes({\n        firstIndex: firstRowIndex,\n        lastIndex: lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      }),\n      _getRenderableIndexes2 = _slicedToArray(_getRenderableIndexes, 2),\n      firstRowToRender = _getRenderableIndexes2[0],\n      lastRowToRender = _getRenderableIndexes2[1];\n    for (var i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      var row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n    }\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n      lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n    }\n    return {\n      firstRowIndex: firstRowIndex,\n      lastRowIndex: lastRowIndex,\n      firstColumnIndex: firstColumnIndex,\n      lastColumnIndex: lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(function () {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = \"translate3d(0px, 0px, 0px)\";\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(function () {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  var handleResize = React.useCallback(function () {\n    if (rootRef.current) {\n      setContainerDimensions({\n        width: rootRef.current.clientWidth,\n        height: rootRef.current.clientHeight\n      });\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  var updateRenderZonePosition = React.useCallback(function (nextRenderContext) {\n    var _getRenderableIndexes3 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      }),\n      _getRenderableIndexes4 = _slicedToArray(_getRenderableIndexes3, 2),\n      firstRowToRender = _getRenderableIndexes4[0],\n      lastRowToRender = _getRenderableIndexes4[1];\n    var _getRenderableIndexes5 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstColumnIndex,\n        lastIndex: nextRenderContext.lastColumnIndex,\n        minFirstIndex: renderZoneMinColumnIndex,\n        maxLastIndex: renderZoneMaxColumnIndex,\n        buffer: rootProps.columnBuffer\n      }),\n      _getRenderableIndexes6 = _slicedToArray(_getRenderableIndexes5, 1),\n      initialFirstColumnToRender = _getRenderableIndexes6[0];\n    var firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef: apiRef,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    var direction = theme.direction === 'ltr' ? 1 : -1;\n    var top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    var left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n    renderZoneRef.current.style.transform = \"translate3d(\".concat(left, \"px, \").concat(top, \"px, 0px)\");\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top: top,\n        left: left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  var updateRenderContext = React.useCallback(function (nextRenderContext) {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    var _getRenderableIndexes7 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      }),\n      _getRenderableIndexes8 = _slicedToArray(_getRenderableIndexes7, 2),\n      firstRowToRender = _getRenderableIndexes8[0],\n      lastRowToRender = _getRenderableIndexes8[1];\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(function () {\n    if (containerDimensions.width == null) {\n      return;\n    }\n    var initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    var _scrollPosition$curre2 = scrollPosition.current,\n      top = _scrollPosition$curre2.top,\n      left = _scrollPosition$curre2.left;\n    var params = {\n      top: top,\n      left: left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n  var handleScroll = useEventCallback(function (event) {\n    var _event$currentTarget = event.currentTarget,\n      scrollTop = _event$currentTarget.scrollTop,\n      scrollLeft = _event$currentTarget.scrollLeft;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n\n    // When virtualization is disabled, the context never changes during scroll\n    var nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    var topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    var bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    var topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    var bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    var shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(function () {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  });\n  var handleWheel = useEventCallback(function (event) {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  });\n  var handleTouchMove = useEventCallback(function (event) {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  });\n  var indexOfRowWithFocusedCell = React.useMemo(function () {\n    if (cellFocus !== null) {\n      return currentPage.rows.findIndex(function (row) {\n        return row.id === cellFocus.id;\n      });\n    }\n    return -1;\n  }, [cellFocus, currentPage.rows]);\n  var getRows = function getRows() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext: renderContext\n    };\n    var _rootProps$slotProps;\n    var onRowRender = params.onRowRender,\n      nextRenderContext = params.renderContext,\n      _params$minFirstColum = params.minFirstColumn,\n      minFirstColumn = _params$minFirstColum === void 0 ? renderZoneMinColumnIndex : _params$minFirstColum,\n      _params$maxLastColumn = params.maxLastColumn,\n      maxLastColumn = _params$maxLastColumn === void 0 ? renderZoneMaxColumnIndex : _params$maxLastColumn,\n      _params$availableSpac = params.availableSpace,\n      availableSpace = _params$availableSpac === void 0 ? containerDimensions.width : _params$availableSpac,\n      _params$rowIndexOffse = params.rowIndexOffset,\n      rowIndexOffset = _params$rowIndexOffse === void 0 ? 0 : _params$rowIndexOffse,\n      _params$position = params.position,\n      position = _params$position === void 0 ? 'center' : _params$position;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    var rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    var columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    var _getRenderableIndexes9 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rowBuffer\n      }),\n      _getRenderableIndexes10 = _slicedToArray(_getRenderableIndexes9, 2),\n      firstRowToRender = _getRenderableIndexes10[0],\n      lastRowToRender = _getRenderableIndexes10[1];\n    var renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(function (row) {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn: minFirstColumn,\n          maxLastColumn: maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (var i = firstRowToRender; i < lastRowToRender; i += 1) {\n        var row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn: minFirstColumn,\n          maxLastColumn: maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    // If the selected row is not within the current range of rows being displayed,\n    // we need to render it at either the top or bottom of the rows,\n    // depending on whether it is above or below the range.\n\n    var isRowWithFocusedCellNotInRange = false;\n    if (indexOfRowWithFocusedCell > -1) {\n      var rowWithFocusedCell = currentPage.rows[indexOfRowWithFocusedCell];\n      if (firstRowToRender > indexOfRowWithFocusedCell || lastRowToRender < indexOfRowWithFocusedCell) {\n        isRowWithFocusedCellNotInRange = true;\n        if (indexOfRowWithFocusedCell > firstRowToRender) {\n          renderedRows.push(rowWithFocusedCell);\n        } else {\n          renderedRows.unshift(rowWithFocusedCell);\n        }\n        apiRef.current.calculateColSpan({\n          rowId: rowWithFocusedCell.id,\n          minFirstColumn: minFirstColumn,\n          maxLastColumn: maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    var _getRenderableIndexes11 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstColumnIndex,\n        lastIndex: nextRenderContext.lastColumnIndex,\n        minFirstIndex: minFirstColumn,\n        maxLastIndex: maxLastColumn,\n        buffer: columnBuffer\n      }),\n      _getRenderableIndexes12 = _slicedToArray(_getRenderableIndexes11, 2),\n      initialFirstColumnToRender = _getRenderableIndexes12[0],\n      lastColumnToRender = _getRenderableIndexes12[1];\n    var firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef: apiRef,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    var isColumnWihFocusedCellNotInRange = false;\n    if (firstColumnToRender > indexOfColumnWithFocusedCell || lastColumnToRender < indexOfColumnWithFocusedCell) {\n      isColumnWihFocusedCellNotInRange = true;\n    }\n    var _getRenderedColumnsRe = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, isColumnWihFocusedCellNotInRange ? indexOfColumnWithFocusedCell : -1),\n      focusedCellColumnIndexNotInRange = _getRenderedColumnsRe.focusedCellColumnIndexNotInRange,\n      renderedColumns = _getRenderedColumnsRe.renderedColumns;\n    var _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n      rootRowStyle = _ref.style,\n      rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n    var invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = Object.create(null);\n    }\n    var rows = [];\n    for (var _i = 0; _i < renderedRows.length; _i += 1) {\n      var _currentPage$range5;\n      var _renderedRows$_i = renderedRows[_i],\n        id = _renderedRows$_i.id,\n        model = _renderedRows$_i.model;\n      var isRowNotVisible = isRowWithFocusedCellNotInRange && cellFocus.id === id;\n      var lastVisibleRowIndex = isRowWithFocusedCellNotInRange ? firstRowToRender + _i === currentPage.rows.length : firstRowToRender + _i === currentPage.rows.length - 1;\n      var baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      var isSelected = void 0;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      if (onRowRender) {\n        onRowRender(id);\n      }\n      var focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      var columnWithFocusedCellNotInRange = focusedCellColumnIndexNotInRange !== undefined && visibleColumns[focusedCellColumnIndexNotInRange];\n      var renderedColumnsWithFocusedCell = columnWithFocusedCellNotInRange && focusedCell ? [columnWithFocusedCellNotInRange].concat(_toConsumableArray(renderedColumns)) : renderedColumns;\n      var tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        var cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      var _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n        rowStyle = _ref2.style,\n        rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n      if (!rowStyleCache.current[id]) {\n        var style = _extends({}, rowStyle, rootRowStyle);\n        rowStyleCache.current[id] = style;\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        focusedCellColumnIndexNotInRange: focusedCellColumnIndexNotInRange,\n        isNotVisible: isRowNotVisible,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumnsWithFocusedCell,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null || (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + _i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n  var needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;\n  var contentSize = React.useMemo(function () {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    var height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    var shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    var size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height: height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n    }\n\n    return size;\n  }, [apiRef, rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar, rootProps.autoHeight, rootProps.rowHeight, currentPage.rows.length]);\n  React.useEffect(function () {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  var rootStyle = React.useMemo(function () {\n    var style = {};\n    if (!needsHorizontalScrollbar) {\n      style.overflowX = 'hidden';\n    }\n    if (rootProps.autoHeight) {\n      style.overflowY = 'hidden';\n    }\n    return style;\n  }, [needsHorizontalScrollbar, rootProps.autoHeight]);\n  var getRenderContext = React.useCallback(function () {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.register('private', {\n    getRenderContext: getRenderContext\n  });\n  return {\n    renderContext: renderContext,\n    updateRenderZonePosition: updateRenderZonePosition,\n    getRows: getRows,\n    getRootProps: function getRootProps() {\n      var inputProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove\n      }, inputProps, {\n        style: inputProps.style ? _extends({}, inputProps.style, rootStyle) : rootStyle\n      });\n    },\n    getContentProps: function getContentProps() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        style = _ref4.style;\n      return {\n        style: style ? _extends({}, style, contentSize) : contentSize\n      };\n    },\n    getRenderZoneProps: function getRenderZoneProps() {\n      return {\n        ref: renderZoneRef\n      };\n    }\n  };\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","ReactDOM","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useEventCallback","useEventCallback","useTheme","defaultMemoize","useGridPrivateApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridFocusCellSelector","gridTabIndexCellSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","getMinimalContentHeight","jsx","_jsx","binarySearch","offset","positions","sliceStart","arguments","length","undefined","sliceEnd","pivot","Math","floor","itemOffset","exponentialSearch","index","interval","abs","min","getRenderableIndexes","_ref3","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","areRenderContextsEqual","context1","context2","firstRowIndex","lastRowIndex","firstColumnIndex","lastColumnIndex","MEMOIZE_OPTIONS","maxSize","useGridVirtualScroller","props","_currentPage$range3","_currentPage$range4","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","_props$renderZoneMinC","renderZoneMinColumnIndex","_props$renderZoneMaxC","renderZoneMaxColumnIndex","getRowProps","theme","columnPositions","columnsTotalWidth","cellFocus","cellTabIndex","rowsMeta","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","_React$useState","useState","_React$useState2","_slicedToArray","renderContext","setRenderContext","prevRenderContext","scrollPosition","top","left","_React$useState3","width","height","_React$useState4","containerDimensions","setContainerDimensions","prevTotalWidth","rowStyleCache","Object","create","prevGetRowProps","prevRootRowStyle","getRenderedColumnsRef","columns","firstColumnToRender","lastColumnToRender","minFirstColumn","maxLastColumn","indexOfColumnWithFocusedCell","focusedCellColumnIndexNotInRange","renderedColumns","slice","useMemo","findIndex","column","field","getNearestIndexToRender","useCallback","_currentPage$range","_currentPage$range2","lastMeasuredIndexRelativeToAllRows","current","getLastMeasuredRowIndex","allRowsMeasured","Infinity","range","lastMeasuredIndexRelativeToCurrentPage","computeRenderContext","rows","_scrollPosition$curre","autoHeight","hasRowWithAutoHeight","_getRenderableIndexes","rowBuffer","_getRenderableIndexes2","firstRowToRender","lastRowToRender","i","row","rowHasAutoHeight","id","style","transform","scrollLeft","scrollTop","clientWidth","clientHeight","currentPageTotalHeight","handleResize","updateRenderZonePosition","nextRenderContext","_getRenderableIndexes3","_getRenderableIndexes4","_getRenderableIndexes5","columnBuffer","_getRenderableIndexes6","initialFirstColumnToRender","visibleRows","direction","state","concat","updateRenderContext","_getRenderableIndexes7","_getRenderableIndexes8","publishEvent","initialRenderContext","_scrollPosition$curre2","params","handleScroll","event","_event$currentTarget","currentTarget","topRowsScrolledSincePreviousRender","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","indexOfRowWithFocusedCell","getRows","_rootProps$slotProps","onRowRender","_params$minFirstColum","_params$maxLastColumn","_params$availableSpac","availableSpace","_params$rowIndexOffse","rowIndexOffset","_params$position","position","_getRenderableIndexes9","_getRenderableIndexes10","renderedRows","forEach","push","calculateColSpan","rowId","isRowWithFocusedCellNotInRange","rowWithFocusedCell","unshift","_getRenderableIndexes11","_getRenderableIndexes12","isColumnWihFocusedCellNotInRange","_getRenderedColumnsRe","_ref","slotProps","rootRowStyle","rootRowProps","invalidatesCachedRowStyle","_currentPage$range5","_renderedRows$_i","model","isRowNotVisible","lastVisibleRowIndex","baseRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","focusedCell","columnWithFocusedCellNotInRange","renderedColumnsWithFocusedCell","_toConsumableArray","tabbableCell","cellParams","getCellParams","cellMode","_ref2","rowStyle","rowProps","slots","isNotVisible","rowHeight","selected","containerWidth","isLastVisible","needsHorizontalScrollbar","contentSize","max","shouldExtendContent","size","minHeight","useEffect","rootStyle","overflowX","overflowY","getRenderContext","register","getRootProps","inputProps","onScroll","onWheel","onTouchMove","getContentProps","_ref4","getRenderZoneProps"],"sources":["/Users/zorro/Downloads/Flowise/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Uses binary search to avoid looping through all possible positions\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n// The `maxSize` is 3 so that reselect caches the `renderedColumns` values for the pinned left,\n// unpinned, and pinned right sections.\nconst MEMOIZE_OPTIONS = {\n  maxSize: 3\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const theme = useTheme();\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const rowStyleCache = React.useRef(Object.create(null));\n  const prevGetRowProps = React.useRef();\n  const prevRootRowStyle = React.useRef();\n  const getRenderedColumnsRef = React.useRef(defaultMemoize((columns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, indexOfColumnWithFocusedCell) => {\n    // If the selected column is not within the current range of columns being displayed,\n    // we need to render it at either the left or right of the columns,\n    // depending on whether it is above or below the range.\n    let focusedCellColumnIndexNotInRange;\n    const renderedColumns = columns.slice(firstColumnToRender, lastColumnToRender);\n    if (indexOfColumnWithFocusedCell > -1) {\n      // check if it is not on the left pinned column.\n      if (firstColumnToRender > indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell >= minFirstColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n      // check if it is not on the right pinned column.\n      else if (lastColumnToRender < indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell < maxLastColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n    }\n    return {\n      focusedCellColumnIndexNotInRange,\n      renderedColumns\n    };\n  }, MEMOIZE_OPTIONS));\n  const indexOfColumnWithFocusedCell = React.useMemo(() => {\n    if (cellFocus !== null) {\n      return visibleColumns.findIndex(column => column.field === cellFocus.field);\n    }\n    return -1;\n  }, [cellFocus, visibleColumns]);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    }\n\n    // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n    }\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n      lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n    }\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerDimensions({\n        width: rootRef.current.clientWidth,\n        height: rootRef.current.clientHeight\n      });\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const direction = theme.direction === 'ltr' ? 1 : -1;\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n  const handleScroll = useEventCallback(event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n\n    // When virtualization is disabled, the context never changes during scroll\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  });\n  const handleWheel = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  });\n  const handleTouchMove = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  });\n  const indexOfRowWithFocusedCell = React.useMemo(() => {\n    if (cellFocus !== null) {\n      return currentPage.rows.findIndex(row => row.id === cellFocus.id);\n    }\n    return -1;\n  }, [cellFocus, currentPage.rows]);\n  const getRows = (params = {\n    renderContext\n  }) => {\n    var _rootProps$slotProps;\n    const {\n      onRowRender,\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    // If the selected row is not within the current range of rows being displayed,\n    // we need to render it at either the top or bottom of the rows,\n    // depending on whether it is above or below the range.\n\n    let isRowWithFocusedCellNotInRange = false;\n    if (indexOfRowWithFocusedCell > -1) {\n      const rowWithFocusedCell = currentPage.rows[indexOfRowWithFocusedCell];\n      if (firstRowToRender > indexOfRowWithFocusedCell || lastRowToRender < indexOfRowWithFocusedCell) {\n        isRowWithFocusedCellNotInRange = true;\n        if (indexOfRowWithFocusedCell > firstRowToRender) {\n          renderedRows.push(rowWithFocusedCell);\n        } else {\n          renderedRows.unshift(rowWithFocusedCell);\n        }\n        apiRef.current.calculateColSpan({\n          rowId: rowWithFocusedCell.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    let isColumnWihFocusedCellNotInRange = false;\n    if (firstColumnToRender > indexOfColumnWithFocusedCell || lastColumnToRender < indexOfColumnWithFocusedCell) {\n      isColumnWihFocusedCellNotInRange = true;\n    }\n    const {\n      focusedCellColumnIndexNotInRange,\n      renderedColumns\n    } = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, isColumnWihFocusedCellNotInRange ? indexOfColumnWithFocusedCell : -1);\n    const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n      {\n        style: rootRowStyle\n      } = _ref,\n      rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = Object.create(null);\n    }\n    const rows = [];\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5;\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const isRowNotVisible = isRowWithFocusedCellNotInRange && cellFocus.id === id;\n      const lastVisibleRowIndex = isRowWithFocusedCellNotInRange ? firstRowToRender + i === currentPage.rows.length : firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      if (onRowRender) {\n        onRowRender(id);\n      }\n      const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      const columnWithFocusedCellNotInRange = focusedCellColumnIndexNotInRange !== undefined && visibleColumns[focusedCellColumnIndexNotInRange];\n      const renderedColumnsWithFocusedCell = columnWithFocusedCellNotInRange && focusedCell ? [columnWithFocusedCellNotInRange, ...renderedColumns] : renderedColumns;\n      let tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      const _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n        {\n          style: rowStyle\n        } = _ref2,\n        rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n      if (!rowStyleCache.current[id]) {\n        const style = _extends({}, rowStyle, rootRowStyle);\n        rowStyleCache.current[id] = style;\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        focusedCellColumnIndexNotInRange: focusedCellColumnIndexNotInRange,\n        isNotVisible: isRowNotVisible,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumnsWithFocusedCell,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null || (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n    }\n\n    return size;\n  }, [apiRef, rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar, rootProps.autoHeight, rootProps.rowHeight, currentPage.rows.length]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  const rootStyle = React.useMemo(() => {\n    const style = {};\n    if (!needsHorizontalScrollbar) {\n      style.overflowX = 'hidden';\n    }\n    if (rootProps.autoHeight) {\n      style.overflowY = 'hidden';\n    }\n    return style;\n  }, [needsHorizontalScrollbar, rootProps.autoHeight]);\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.register('private', {\n    getRenderContext\n  });\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (inputProps = {}) => _extends({\n      ref: handleRef,\n      onScroll: handleScroll,\n      onWheel: handleWheel,\n      onTouchMove: handleTouchMove\n    }, inputProps, {\n      style: inputProps.style ? _extends({}, inputProps.style, rootStyle) : rootStyle\n    }),\n    getContentProps: ({\n      style\n    } = {}) => ({\n      style: style ? _extends({}, style, contentSize) : contentSize\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}