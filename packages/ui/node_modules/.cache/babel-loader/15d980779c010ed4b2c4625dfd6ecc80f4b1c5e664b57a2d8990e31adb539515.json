{"ast":null,"code":"import _objectSpread from\"/Users/zorro/Downloads/Flowise/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/Users/zorro/Downloads/Flowise/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import React from'react';import{useDispatch,useSelector}from'react-redux';import{useSnackbar}from'notistack';import{removeSnackbar}from'store/actions';var displayed=[];var useNotifier=function useNotifier(){var dispatch=useDispatch();var notifier=useSelector(function(state){return state.notifier;});var notifications=notifier.notifications;var _useSnackbar=useSnackbar(),enqueueSnackbar=_useSnackbar.enqueueSnackbar,closeSnackbar=_useSnackbar.closeSnackbar;var storeDisplayed=function storeDisplayed(id){displayed=[].concat(_toConsumableArray(displayed),[id]);};var removeDisplayed=function removeDisplayed(id){displayed=_toConsumableArray(displayed.filter(function(key){return id!==key;}));};React.useEffect(function(){notifications.forEach(function(_ref){var key=_ref.key,message=_ref.message,_ref$options=_ref.options,options=_ref$options===void 0?{}:_ref$options,_ref$dismissed=_ref.dismissed,dismissed=_ref$dismissed===void 0?false:_ref$dismissed;if(dismissed){// dismiss snackbar using notistack\ncloseSnackbar(key);return;}// do nothing if snackbar is already displayed\nif(displayed.includes(key))return;// display snackbar using notistack\nenqueueSnackbar(message,_objectSpread(_objectSpread({key:key},options),{},{onClose:function onClose(event,reason,myKey){if(options.onClose){options.onClose(event,reason,myKey);}},onExited:function onExited(event,myKey){// remove this snackbar from redux store\ndispatch(removeSnackbar(myKey));removeDisplayed(myKey);}}));// keep track of snackbars that we've displayed\nstoreDisplayed(key);});},[notifications,closeSnackbar,enqueueSnackbar,dispatch]);};export default useNotifier;","map":{"version":3,"names":["React","useDispatch","useSelector","useSnackbar","removeSnackbar","displayed","useNotifier","dispatch","notifier","state","notifications","_useSnackbar","enqueueSnackbar","closeSnackbar","storeDisplayed","id","concat","_toConsumableArray","removeDisplayed","filter","key","useEffect","forEach","_ref","message","_ref$options","options","_ref$dismissed","dismissed","includes","_objectSpread","onClose","event","reason","myKey","onExited"],"sources":["/Users/zorro/Downloads/Flowise/packages/ui/src/utils/useNotifier.js"],"sourcesContent":["import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useSnackbar } from 'notistack'\nimport { removeSnackbar } from 'store/actions'\n\nlet displayed = []\n\nconst useNotifier = () => {\n    const dispatch = useDispatch()\n    const notifier = useSelector((state) => state.notifier)\n    const { notifications } = notifier\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar()\n\n    const storeDisplayed = (id) => {\n        displayed = [...displayed, id]\n    }\n\n    const removeDisplayed = (id) => {\n        displayed = [...displayed.filter((key) => id !== key)]\n    }\n\n    React.useEffect(() => {\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\n            if (dismissed) {\n                // dismiss snackbar using notistack\n                closeSnackbar(key)\n                return\n            }\n\n            // do nothing if snackbar is already displayed\n            if (displayed.includes(key)) return\n\n            // display snackbar using notistack\n            enqueueSnackbar(message, {\n                key,\n                ...options,\n                onClose: (event, reason, myKey) => {\n                    if (options.onClose) {\n                        options.onClose(event, reason, myKey)\n                    }\n                },\n                onExited: (event, myKey) => {\n                    // remove this snackbar from redux store\n                    dispatch(removeSnackbar(myKey))\n                    removeDisplayed(myKey)\n                }\n            })\n\n            // keep track of snackbars that we've displayed\n            storeDisplayed(key)\n        })\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch])\n}\n\nexport default useNotifier\n"],"mappings":"+OAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,WAAW,KAAQ,WAAW,CACvC,OAASC,cAAc,KAAQ,eAAe,CAE9C,GAAI,CAAAC,SAAS,CAAG,EAAE,CAElB,GAAM,CAAAC,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAA,CAAS,CACtB,GAAM,CAAAC,QAAQ,CAAGN,WAAW,CAAC,CAAC,CAC9B,GAAM,CAAAO,QAAQ,CAAGN,WAAW,CAAC,SAACO,KAAK,QAAK,CAAAA,KAAK,CAACD,QAAQ,GAAC,CACvD,GAAQ,CAAAE,aAAa,CAAKF,QAAQ,CAA1BE,aAAa,CAErB,IAAAC,YAAA,CAA2CR,WAAW,CAAC,CAAC,CAAhDS,eAAe,CAAAD,YAAA,CAAfC,eAAe,CAAEC,aAAa,CAAAF,YAAA,CAAbE,aAAa,CAEtC,GAAM,CAAAC,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAIC,EAAE,CAAK,CAC3BV,SAAS,IAAAW,MAAA,CAAAC,kBAAA,CAAOZ,SAAS,GAAEU,EAAE,EAAC,CAClC,CAAC,CAED,GAAM,CAAAG,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAIH,EAAE,CAAK,CAC5BV,SAAS,CAAAY,kBAAA,CAAOZ,SAAS,CAACc,MAAM,CAAC,SAACC,GAAG,QAAK,CAAAL,EAAE,GAAKK,GAAG,GAAC,CAAC,CAC1D,CAAC,CAEDpB,KAAK,CAACqB,SAAS,CAAC,UAAM,CAClBX,aAAa,CAACY,OAAO,CAAC,SAAAC,IAAA,CAAuD,IAApD,CAAAH,GAAG,CAAAG,IAAA,CAAHH,GAAG,CAAEI,OAAO,CAAAD,IAAA,CAAPC,OAAO,CAAAC,YAAA,CAAAF,IAAA,CAAEG,OAAO,CAAPA,OAAO,CAAAD,YAAA,UAAG,CAAC,CAAC,CAAAA,YAAA,CAAAE,cAAA,CAAAJ,IAAA,CAAEK,SAAS,CAATA,SAAS,CAAAD,cAAA,UAAG,KAAK,CAAAA,cAAA,CAClE,GAAIC,SAAS,CAAE,CACX;AACAf,aAAa,CAACO,GAAG,CAAC,CAClB,OACJ,CAEA;AACA,GAAIf,SAAS,CAACwB,QAAQ,CAACT,GAAG,CAAC,CAAE,OAE7B;AACAR,eAAe,CAACY,OAAO,CAAAM,aAAA,CAAAA,aAAA,EACnBV,GAAG,CAAHA,GAAG,EACAM,OAAO,MACVK,OAAO,CAAE,SAAAA,QAACC,KAAK,CAAEC,MAAM,CAAEC,KAAK,CAAK,CAC/B,GAAIR,OAAO,CAACK,OAAO,CAAE,CACjBL,OAAO,CAACK,OAAO,CAACC,KAAK,CAAEC,MAAM,CAAEC,KAAK,CAAC,CACzC,CACJ,CAAC,CACDC,QAAQ,CAAE,SAAAA,SAACH,KAAK,CAAEE,KAAK,CAAK,CACxB;AACA3B,QAAQ,CAACH,cAAc,CAAC8B,KAAK,CAAC,CAAC,CAC/BhB,eAAe,CAACgB,KAAK,CAAC,CAC1B,CAAC,EACJ,CAAC,CAEF;AACApB,cAAc,CAACM,GAAG,CAAC,CACvB,CAAC,CAAC,CACN,CAAC,CAAE,CAACV,aAAa,CAAEG,aAAa,CAAED,eAAe,CAAEL,QAAQ,CAAC,CAAC,CACjE,CAAC,CAED,cAAe,CAAAD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}